@inherits LayoutComponentBase
@using MudBlazor.Utilities
<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" Theme="_theme" @ref="@_mudThemeProvider" />
<MudPopoverProvider/>
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>JIM</PageTitle>

<MudLayout Style="Position: static">

    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer @bind-Open="@IsDrawerOpen" Elevation="0" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" Overlay="false">
            
            <div class="jim-drawer-logo">
                <MudImage Src="/images/jim-logo.png" Width="28" Class="mt-4 ms-4 mb-3" Alt="JIM Logo"></MudImage>
                @if (IsDrawerOpen)
                {
                    <MudText Inline="true">JIM</MudText>
                }
            </div>

            <NavMenu DrawerOpen="@IsDrawerOpen"/>

            <div class="@(IsDrawerOpen ? "jim-drawer-container" : "jim-drawer-container-small") mud-text-secondary">
                @if (IsDrawerOpen)
                {
                    <MudButton 
                        Variant="Variant.Filled" 
                        StartIcon="@(IsDarkMode  ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.DarkMode)" 
                        FullWidth="true"
                        DropShadow="false"
                        OnClick="@(() => IsDarkMode = !IsDarkMode)">
                        @(IsDarkMode ? "Light" : "Dark") mode
                    </MudButton>
                }
                else
                {
                    <MudTooltip Text="@(IsDarkMode ? LightModeText : DarkModeText)">
                        <MudToggleIconButton @bind-Toggled="@IsDarkMode"
                                             Icon="@Icons.Material.Filled.WbSunny" 
                                             Color="@Color.Inherit"
                                             ToggledIcon="@Icons.Material.Filled.DarkMode" 
                                             ToggledColor="@Color.Inherit"/>
                    </MudTooltip>
                }
            </div>

            
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-5 pb-5">
          
                <!-- if someone could find a way to move this to the sidebar and remain functional, that would be amazing -->
                <MudButton 
                    OnClick="@ToggleDrawer" 
                    Variant="Variant.Filled" 
                    DropShadow="false" 
                    StartIcon="@(IsDrawerOpen ? Icons.Material.Filled.MenuOpen : Icons.Material.Filled.Menu)"
                    Size="Size.Small"
                    Class="mb-3">
                    @(IsDrawerOpen ? "Close" : "Open") 
                </MudButton>
            
                @Body

                <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-5 mud-text-secondary">
                    &copy; @DateTime.UtcNow.Year Tetron
                </MudText>

                <MudText Align="Align.Center">
                    <MudLink Href="https://github.com/TetronIO/JIM">
                        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" aria-label="See us on GitHub" Style="color:#515560;"/>
                    </MudLink>
                </MudText>

            </MudContainer>
        </MudMainContent>

    </MudDrawerContainer>

</MudLayout>

@code
{
    private readonly MudTheme _theme = new()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily =
                [
                    "-apple-system",
                    "Segoe UI Variable Display",
                    "Roboto",
                    "Helvetica Neue",
                    "Arial"
                ],
                FontWeight = 400,
                FontSize = "16px"
            }
        },
        PaletteLight = new PaletteLight()
        {
            AppbarBackground = new MudColor("rgb(60,148,255)"),
            Background = new MudColor("#f6f9fc"),
            DrawerBackground = new MudColor("#eef2f6"),
            Primary = new MudColor("rgb(60,148,255)")
        },
        PaletteDark = new PaletteDark()
        {
            ActionDefault = new MudColor("#acb0b3"), // pagination arrow link text
            // ActionDisabled = new MudColor("#2c3441"), // disabled button
            AppbarBackground = new MudColor("#1a273b"),
            Background = new MudColor("#0e1420"),
            Divider = new MudColor("#292838ff"),
            DrawerBackground = new MudColor("#111926"),
            DrawerIcon = new MudColor("#46545f"),
            DrawerText = new MudColor("#acb0b3"),
            LinesDefault = new MudColor("#2a303c"),
            LinesInputs = new MudColor("#595d68"),
            Primary = new MudColor("rgb(60,148,255)"),
            Surface = new MudColor("#121826"),
            TableHover = new MudColor("#151b2b"),
            TableLines = new MudColor("#2a303c"),
            TextDisabled = new MudColor("#535861"),
            TextPrimary = new MudColor("#acb0b3"),
            TextSecondary = new MudColor("#515560")
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "4px"
        }
    };

    private MudThemeProvider? _mudThemeProvider;
    private const string LightModeText = "Switch to light mode";
    private const string DarkModeText = "Switch to dark mode";
    private bool IsDrawerOpen { get; set; }
    private bool IsDarkMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        IsDrawerOpen = !IsDrawerOpen;
    }
}
