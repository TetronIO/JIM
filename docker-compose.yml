version: '3.4'

services:

  jim.web:
    container_name: jim.web
    image: ${DOCKER_REGISTRY-}jim.web
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/jim
     - ENABLE_REQUEST_LOGGING=true
     - SSO_AUTHORITY=1
     - SSO_CLIENT_ID=2
     - SSO_SECRET=3
     - SSO_NAMEID_ATTRIBUTE=Employee ID
     - SSO_INITIAL_ADMIN_NAMEID=1
    volumes:
      - jim-logs-volume:/var/log/jim
    build:
      context: .
      dockerfile: src/JIM.Web/Dockerfile
    depends_on:
      - jim.database
      - jim.service
      - jim.api
    networks:
      - jim-network

  jim.api:
    container_name: jim.api
    image: ${DOCKER_REGISTRY-}jim.api
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/jim
     - ENABLE_REQUEST_LOGGING=true
     - DB_HOSTNAME=JIM.Database
     - DB_NAME=jim
     - DB_USERNAME=jim
     - DB_PASSWORD=password
     - SSO_AUTHORITY=1
     - SSO_CLIENT_ID=2
     - SSO_SECRET=3
     - SSO_NAMEID_ATTRIBUTE=Employee ID
     - SSO_INITIAL_ADMIN_NAMEID=1
    volumes:
      - jim-logs-volume:/var/log/jim
    build:
      context: .
      dockerfile: src/JIM.Api/Dockerfile
    depends_on:
      - jim.database
      - jim.service
    networks:
      - jim-network

  jim.service:
    container_name: jim.service
    image: ${DOCKER_REGISTRY-}jim.service
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/jim
     - DB_HOSTNAME=JIM.Database
     - DB_NAME=jim
     - DB_USERNAME=jim
     - DB_PASSWORD=password
    volumes:
      - jim-logs-volume:/var/log/jim
    build:
      context: .
      dockerfile: src/JIM.Service/Dockerfile
    depends_on:
      - jim.database
    networks:
      - jim-network

  jim.scheduler:
    container_name: jim.scheduler
    image: ${DOCKER_REGISTRY-}jim.scheduler
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/jim
     - DB_HOSTNAME=JIM.Database
     - DB_NAME=jim
     - DB_USERNAME=jim
     - DB_PASSWORD=password
    volumes:
      - jim-logs-volume:/var/log/jim
    build:
      context: .
      dockerfile: src/JIM.Scheduler/Dockerfile
    depends_on:
      - jim.database
      - jim.service
    networks:
      - jim-network
  
  adminer:
    container_name: jim.adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - jim.database
    networks:
      - jim-network

  jim.database:
    container_name: jim.database
    image: postgres
    restart: always
    volumes:
      - jim-db-volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=jim
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=jim
    networks: 
      - jim-network

networks:
  jim-network:
    driver: bridge

volumes:
  jim-db-volume:
    name: jim-db-volume
  jim-logs-volume:
    name: jim-logs-volume