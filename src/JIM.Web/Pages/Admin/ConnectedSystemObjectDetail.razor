@page "/admin/connected-systems/{CsId:int}/objects/{CsoId}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Connected System Object: @(ConnectedSystemObject != null ? ConnectedSystemObject.Id : null)</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connected System Object:</span> @(ConnectedSystemObject != null ? ConnectedSystemObject.Id : null)</MudText>
<MudBreadcrumbs Items="Breadcrumbs" Class="ps-0"></MudBreadcrumbs>

<MudText Typo="Typo.subtitle1">
    This is the representation of the object as it is in the Connected System as seen after the last import. It does not include any pending export changes.
</MudText>

@if (ConnectedSystemHeader != null && ConnectedSystemObject != null)
{
    <MudPaper Class="pa-5 mt-5 mb-5" Outlined="true">
        <MudTooltip Text="A JIM-generated value that is used internally to identify the Connected System Object" Arrow="true" Placement="Placement.Right"><MudText Typo="Typo.overline" Style="@($"color:{Colors.Grey.Darken3};")">Internal Id:</MudText></MudTooltip>
        <MudText Style="@($"color:{Colors.Grey.Darken3};")">@ConnectedSystemObject.Id</MudText>

        @if (ExternalIdAttributeValue != null)
        {
            <br />
            <MudTooltip Text="The immutable unique identifier for the object in the Connected System. Typically generated by the external system" Arrow="true" Placement="Placement.Right"><MudText Typo="Typo.overline">External Id (<span class="mud-secondary-text">@ExternalIdAttributeValue.Attribute.Name</span>):</MudText></MudTooltip>
            <MudText>@ExternalIdAttributeValue</MudText>
        }

        @if (SecondaryExternalIdAttributeValue != null)
        {
            <br />
            <MudTooltip Text="Some external systems, such as LDAP directories use an additional attribute to identify objects when referencing them" Arrow="true" Placement="Placement.Right"><MudText Typo="Typo.overline">Secondary External Id (<span class="mud-secondary-text">@SecondaryExternalIdAttributeValue.Attribute.Name</span>):</MudText></MudTooltip>
            <MudText>@SecondaryExternalIdAttributeValue</MudText>
        }

    </MudPaper>

    <style>
        .mud-table-cell-custom-group {
            font-weight: 500;
        }

        .mud-table-cell-custom-group-footer {
            padding-bottom: 50px;
            text-align: right;
        }
    </style>

    <MudPaper Class="pa-5" Outlined="true">
        <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0"
            Items="@(ConnectedSystemObject.AttributeValues)"
            GroupBy="@_groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
            GroupFooterClass="mb-4"
            Dense="true">
            <ColGroup>
                <col style="width: 60px;" />
                <col />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh>Attribute Value Type</MudTh>
                <MudTh>Attribute Value</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="5">@(context.GroupName): <span class="mud-secondary-text">@(context.Key)</span></MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.Attribute.Type</MudTd>
                <MudTd DataLabel="Value">
                    @if (context.UnresolvedReferenceValue != null)
                    {
                        <Text>Unresolved reference: <span Style="@($"color:{Colors.Grey.Darken2};")">@context.ToString()</span></Text>
                    }
                    else
                    {
                        @context.ToString()
                    }
                </MudTd>
            </RowTemplate>
            <GroupFooterTemplate>
                <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Values: @context.Items.Count()</MudTh>
            </GroupFooterTemplate>
        </MudTable>
    </MudPaper>
}

@code {
    /// <summary>
    /// Connected System Id.
    /// </summary>
    [Parameter]
    public int CsId { get; set; }

    /// <summary>
    /// Connected System Object Id.
    /// </summary>
    [Parameter]
    public string CsoId { get; set; } = null!;

    private ConnectedSystemHeader? ConnectedSystemHeader { get; set; }

    private ConnectedSystemObject? ConnectedSystemObject { get; set; }

    private ConnectedSystemObjectAttributeValue? ExternalIdAttributeValue { get; set; }

    private ConnectedSystemObjectAttributeValue? SecondaryExternalIdAttributeValue { get; set; }

    private List<BreadcrumbItem> Breadcrumbs { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        ConnectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(CsId);
        if (ConnectedSystemHeader == null)
        {
            // ConnectedSystem not found, redirect to the Connected Systems index page
            NavManager.NavigateTo($"/admin/connected-systems/");
            return;
        }

        var csoIdValid = Guid.TryParse(CsoId, out Guid connectedSystemObjectId);
        if (!csoIdValid)
        {
            NavManager.NavigateTo(Utilities.GetConnectedSystemObjectsHref(CsId));
            return;
        }

        ConnectedSystemObject = await Jim.ConnectedSystems.GetConnectedSystemObjectAsync(CsId, connectedSystemObjectId);
        if (ConnectedSystemObject == null)
        {
            // ConnectedSystemObject not found, redirect to Connected System Objects index page
            NavManager.NavigateTo(Utilities.GetConnectedSystemObjectsHref(CsId));
            return;
        }

        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Connected Systems", href: "/admin/connected-systems/"),
            new BreadcrumbItem(ConnectedSystemHeader.Name, href: Utilities.GetConnectedSystemHref(ConnectedSystemHeader)),
            new BreadcrumbItem("Objects", href: Utilities.GetConnectedSystemObjectsHref(ConnectedSystemHeader)),
            new BreadcrumbItem(CsoId.ToString(), href: null, disabled: true)
        };

        ExternalIdAttributeValue = ConnectedSystemObject.ExternalIdAttributeValue;
        SecondaryExternalIdAttributeValue = ConnectedSystemObject.SecondaryExternalIdAttributeValue;
    }

    private TableGroupDefinition<ConnectedSystemObjectAttributeValue> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            Selector = (e) => e.Attribute.Name
        };
}
