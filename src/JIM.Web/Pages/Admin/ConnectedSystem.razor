@page "/admin/connected-systems/{Id:int}/{Name}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Connected System: @connectedSystem?.Name</PageTitle>
<h1><span class="text-muted">Connected System:</span> @connectedSystem?.Name</h1>

<p>Some aspects of a Connected System can only be configured once basic details and setting values have been provided.</p>

<ul class="nav nav-tabs mt-3">
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Details ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Details">Details</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Settings ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Settings">Settings</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.ObjectTypes ? "active" : "") @(!settingsValidated ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.ObjectTypes">Object Types</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Attributes ? "active" : "") @(!settingsValidated ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Attributes">Attributes</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Attributes ? "active" : "") @(!settingsValidated ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Containers">Partitions &amp; Containers</a>
    </li>
</ul>
<div class="box-no-top">

    @if (connectedSystem != null && settingCategories != null) 
    {
        if (activeTab == Tabs.Details)
        {
            <EditForm Model="@connectedSystem" OnValidSubmit="HandleValidDetailsSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="inputConnector" class="form-label">Connector</label>
                    <InputText class="form-control" id="inputConnector" @bind-Value="connectedSystem.ConnectorDefinition.Name" disabled />
                </div>
                <div class="mb-3">
                    <label for="inputName" class="form-label">Name</label>
                    <InputText class="form-control" id="inputName" @bind-Value="connectedSystem.Name" DisplayName="Name" />
                </div>
                <div class="mb-3">
                    <label for="textAreaDescription" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="textAreaDescription" rows="3" @bind-Value="connectedSystem.Description" />
                </div>
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Disabled="detailsFormSubmitting">Save Changes</Button>
            </EditForm>
        }
        else if (activeTab == Tabs.Settings)
        {
            <p>Configure the connector for your environment by supplying values for the settings below.</p>

            <div class="accordion">
                @for (var i = 0; i < settingCategories.Count; i++)
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="panelsStayOpen-heading@(i)">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="true" aria-controls="panelsStayOpen-collapse@(i)">
                                @settingCategories[i]
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-heading@(i)">
                            <div class="accordion-body">

                                @foreach (var settingValue in connectedSystem.SettingValues.Where(sv => sv.Setting.Category == @settingCategories[i]))
                                {
                                    @if (settingValue.Setting.Type == ConnectedSystemSettingType.Heading)
                                    {
                                        <strong>@settingValue.Setting.Name</strong>
                                    }
                                    else if (settingValue.Setting.Type == ConnectedSystemSettingType.Divider)
                                    {
                                        <hr />
                                    }
                                    else
                                    {
                                        <p>@settingValue.Setting.Name : @settingValue.Setting.Type</p>
                                    }
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (activeTab == Tabs.ObjectTypes)
        {
            <p>object types tab...</p>
        }
        else if (activeTab == Tabs.Attributes)
        {
            <p>attributes tab...</p>
        }
        else if (activeTab == Tabs.Containers)
        {
            <p>containers tab...</p>
        }
    }

</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomCenter" AutoHide="true" />

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private JIM.Models.Staging.ConnectedSystem? connectedSystem;
    private List<ToastMessage> messages = new List<ToastMessage>();
    private bool detailsFormSubmitting = false;
    private bool settingsFormSubmitting = false;
    private bool settingsValidated = false;
    private Tabs activeTab = Tabs.Details;
    private List<ConnectedSystemSettingCategory>? settingCategories;

    private enum Tabs
    {
        Details,
        Settings,
        ObjectTypes,
        Attributes,
        Containers
    }

    protected override async Task OnInitializedAsync()
    {
        connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(Id);
        if (connectedSystem == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        // get a list of the distinct setting categories in use, so we can render them in category blocks
        settingCategories = connectedSystem.SettingValues.Select(q => q.Setting.Category).Distinct().ToList();
    }

    private async Task HandleValidDetailsSubmit()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidDetailsSubmit)}: connectedSystem was null");
            return;
        }
        
        detailsFormSubmitting = true;
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your details changes have been saved."));
        detailsFormSubmitting = false;
    }

    private async Task HandleValidSettingsSubmit()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidSettingsSubmit)}: connectedSystem was null");
            return;
        }

        settingsFormSubmitting = true;
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your setting changes have been saved."));
        settingsFormSubmitting = false;
        settingsValidated = true;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string message) => new ToastMessage
    {
        Type = toastType,
        Title = title,
        HelpText = $"{DateTime.Now}",
        Message = message,
    };
}