// <auto-generated />
using System;
using System.Collections.Generic;
using JIM.PostgresData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JIM.PostgresData.Migrations
{
    [DbContext(typeof(JimDbContext))]
    [Migration("20230323202647_ContainerParent")]
    partial class ContainerParent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataGenerationTemplateAttributeMetaverseObjectType", b =>
                {
                    b.Property<int>("DataGenerationTemplateAttributesId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceMetaverseObjectTypesId")
                        .HasColumnType("integer");

                    b.HasKey("DataGenerationTemplateAttributesId", "ReferenceMetaverseObjectTypesId");

                    b.HasIndex("ReferenceMetaverseObjectTypesId");

                    b.ToTable("DataGenerationTemplateAttributeMetaverseObjectType");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributePlurality")
                        .HasColumnType("integer");

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("MetaverseAttributes");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("MetaverseObjects");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("ByteValue")
                        .HasColumnType("bytea");

                    b.Property<int?>("ContributedBySystemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GuidValue")
                        .HasColumnType("uuid");

                    b.Property<int?>("IntValue")
                        .HasColumnType("integer");

                    b.Property<int>("MetaverseObjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceValueId")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ContributedBySystemId");

                    b.HasIndex("DateTimeValue");

                    b.HasIndex("GuidValue");

                    b.HasIndex("IntValue");

                    b.HasIndex("MetaverseObjectId");

                    b.HasIndex("ReferenceValueId");

                    b.HasIndex("StringValue");

                    b.ToTable("MetaverseObjectAttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("MetaverseObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.Core.ServiceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsServiceInMaintenanceMode")
                        .HasColumnType("boolean");

                    b.Property<string>("SSOAuthority")
                        .HasColumnType("text");

                    b.Property<string>("SSOClientId")
                        .HasColumnType("text");

                    b.Property<bool>("SSOEnableLogOut")
                        .HasColumnType("boolean");

                    b.Property<string>("SSOSecret")
                        .HasColumnType("text");

                    b.Property<string>("SSOUniqueIdentifierClaimType")
                        .HasColumnType("text");

                    b.Property<int?>("SSOUniqueIdentifierMetaverseAttributeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SSOUniqueIdentifierMetaverseAttributeId");

                    b.ToTable("ServiceSettings");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataGenerationTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaverseObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectsToCreate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataGenerationTemplateId");

                    b.HasIndex("MetaverseObjectTypeId");

                    b.ToTable("DataGenerationObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("DataGenerationTemplates");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeDependencyId")
                        .HasColumnType("integer");

                    b.Property<bool?>("BoolShouldBeRandom")
                        .HasColumnType("boolean");

                    b.Property<int?>("BoolTrueDistribution")
                        .HasColumnType("integer");

                    b.Property<int?>("ConnectedSystemAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DataGenerationObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagerDepthPercentage")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MinNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("MvaRefMaxAssignments")
                        .HasColumnType("integer");

                    b.Property<int?>("MvaRefMinAssignments")
                        .HasColumnType("integer");

                    b.Property<string>("Pattern")
                        .HasColumnType("text");

                    b.Property<int?>("PopulatedValuesPercentage")
                        .HasColumnType("integer");

                    b.Property<bool?>("RandomNumbers")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SequentialNumbers")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDependencyId");

                    b.HasIndex("ConnectedSystemAttributeId");

                    b.HasIndex("DataGenerationObjectTypeId");

                    b.HasIndex("MetaverseAttributeId");

                    b.ToTable("DataGenerationTemplateAttributes");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttributeDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComparisonType")
                        .HasColumnType("integer");

                    b.Property<int>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MetaverseAttributeId");

                    b.ToTable("DataGenerationTemplateAttributeDependency");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttributeWeightedValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataGenerationTemplateAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DataGenerationTemplateAttributeId");

                    b.ToTable("DataGenerationTemplateAttributeWeightedValue");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExampleDataSets");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSetInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataGenerationTemplateAttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("ExampleDataSetId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataGenerationTemplateAttributeId");

                    b.HasIndex("ExampleDataSetId");

                    b.ToTable("ExampleDataSetInstances");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExampleDataSetId")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExampleDataSetId");

                    b.ToTable("ExampleDataSetValues");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FunctionLibraryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OutputType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionLibraryId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FunctionLibrary");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FunctionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionParameter");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedSystemObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaverseObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("ProjectToMetaverse")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ProvisionToConnectedSystem")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("ConnectedSystemObjectTypeId");

                    b.HasIndex("MetaverseObjectTypeId");

                    b.ToTable("SyncRules");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("SynchronisationRuleId")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetConnectedSystemAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetMetaverseAttributeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SynchronisationRuleId");

                    b.HasIndex("TargetConnectedSystemAttributeId");

                    b.HasIndex("TargetMetaverseAttributeId");

                    b.ToTable("SyncRuleMapping");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConnectedSystemAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("FunctionId")
                        .HasColumnType("integer");

                    b.Property<int?>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("SyncRuleMappingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemAttributeId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("SyncRuleMappingId");

                    b.ToTable("SyncRuleMappingSource");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSourceParamValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConnectedSystemAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<int>("FunctionParameterId")
                        .HasColumnType("integer");

                    b.Property<int?>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<int?>("SyncRuleMappingSourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemAttributeId");

                    b.HasIndex("FunctionParameterId");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("SyncRuleMappingSourceId");

                    b.ToTable("SyncRuleMappingSourceParamValue");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaultForMetaverseObjectType")
                        .HasColumnType("boolean");

                    b.Property<int>("MetaverseObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MetaverseObjectTypeId");

                    b.HasIndex("Uri");

                    b.ToTable("PredefinedSearches");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("PredefinedSearchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("PredefinedSearchId");

                    b.ToTable("PredefinedSearchAttribute");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComparisonType")
                        .HasColumnType("integer");

                    b.Property<int>("MetaverseAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PredefinedSearchCriteriaGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("PredefinedSearchCriteriaGroupId");

                    b.ToTable("PredefinedSearchCriteria");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchCriteriaGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int?>("PredefinedSearchId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.HasIndex("PredefinedSearchId");

                    b.ToTable("PredefinedSearchCriteriaGroups");
                });

            modelBuilder.Entity("JIM.Models.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectorDefinitionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SettingValuesValid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorDefinitionId");

                    b.ToTable("ConnectedSystems");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributePlurality")
                        .HasColumnType("integer");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<int>("ConnectedSystemObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemObjectTypeId");

                    b.ToTable("ConnectedSystemAttributes");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ByteValue")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<long?>("ConnectedSystemObjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IntValue")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ConnectedSystemObjectId");

                    b.ToTable("ConnectedSystemAttributeValue");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConnectedSystemContainerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PartitionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemContainerId");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("PartitionId");

                    b.ToTable("ConnectedSystemContainers");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JoinType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MetaverseObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueIdentifierAttributeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("MetaverseObjectId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UniqueIdentifierAttributeId");

                    b.ToTable("ConnectedSystemObjects");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("ConnectedSystemObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemPartition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("ConnectedSystemPartitions");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemRunProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PartitionId")
                        .HasColumnType("integer");

                    b.Property<int>("RunType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("PartitionId");

                    b.ToTable("ConnectedSystemRunProfiles");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemSettingValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CheckboxValue")
                        .HasColumnType("boolean");

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<int?>("IntValue")
                        .HasColumnType("integer");

                    b.Property<int>("SettingId")
                        .HasColumnType("integer");

                    b.Property<string>("StringEncryptedValue")
                        .HasColumnType("text");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("SettingId");

                    b.ToTable("ConnectedSystemSettingValue");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SupportsDeltaImport")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsExport")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsFullImport")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsPartitionContainers")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsPartitions")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConnectorDefinitions");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinitionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectorDefinitionId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("FileSizeBytes")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ImplementsICapabilities")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIConnector")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIContainers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIExportUsingCalls")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIExportUsingFiles")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIImportUsingCalls")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsIImportUsingFiles")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsISchema")
                        .HasColumnType("boolean");

                    b.Property<bool>("ImplementsISettings")
                        .HasColumnType("boolean");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorDefinitionId");

                    b.ToTable("ConnectorDefinitionFiles");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinitionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int?>("ConnectorDefinitionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("DefaultCheckboxValue")
                        .HasColumnType("boolean");

                    b.Property<int?>("DefaultIntValue")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultStringValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("DropDownValues")
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorDefinitionId");

                    b.ToTable("ConnectorDefinitionSetting");
                });

            modelBuilder.Entity("JIM.Models.Tasking.ServiceTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ServiceTasks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ServiceTask");
                });

            modelBuilder.Entity("JIM.Models.Transactional.PendingExport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChangeType")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<long?>("ConnectedSystemObjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ErrorCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("ConnectedSystemObjectId");

                    b.ToTable("PendingExports");
                });

            modelBuilder.Entity("JIM.Models.Transactional.PendingExportAttributeValueChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ByteValue")
                        .HasColumnType("bytea");

                    b.Property<int>("ChangeType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ErrorCount")
                        .HasColumnType("integer");

                    b.Property<int?>("IntValue")
                        .HasColumnType("integer");

                    b.Property<long?>("PendingExportId")
                        .HasColumnType("bigint");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("PendingExportId");

                    b.ToTable("PendingExportAttributeValueChanges");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConnectedSystemErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("ConnectedSystemId")
                        .HasColumnType("integer");

                    b.Property<string>("ConnectedSystemStackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RunType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("SyncRuns");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRunObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConnectedSystemErrorMessage")
                        .HasColumnType("text");

                    b.Property<long?>("ConnectedSystemObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConnectedSystemStackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PendingExportId")
                        .HasColumnType("bigint");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<long>("SynchronisationRunId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemObjectId");

                    b.HasIndex("PendingExportId");

                    b.HasIndex("SynchronisationRunId");

                    b.ToTable("SyncRunObjects");
                });

            modelBuilder.Entity("MetaverseAttributeMetaverseObjectType", b =>
                {
                    b.Property<int>("AttributesId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaverseObjectTypesId")
                        .HasColumnType("integer");

                    b.HasKey("AttributesId", "MetaverseObjectTypesId");

                    b.HasIndex("MetaverseObjectTypesId");

                    b.ToTable("MetaverseAttributeMetaverseObjectType");
                });

            modelBuilder.Entity("MetaverseObjectRole", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("StaticMembersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "StaticMembersId");

                    b.HasIndex("StaticMembersId");

                    b.ToTable("MetaverseObjectRole");
                });

            modelBuilder.Entity("JIM.Models.Tasking.DataGenerationTemplateServiceTask", b =>
                {
                    b.HasBaseType("JIM.Models.Tasking.ServiceTask");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DataGenerationTemplateServiceTask");
                });

            modelBuilder.Entity("DataGenerationTemplateAttributeMetaverseObjectType", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", null)
                        .WithMany()
                        .HasForeignKey("DataGenerationTemplateAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", null)
                        .WithMany()
                        .HasForeignKey("ReferenceMetaverseObjectTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectAttributeValue", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ContributedBySystem")
                        .WithMany()
                        .HasForeignKey("ContributedBySystemId");

                    b.HasOne("JIM.Models.Core.MetaverseObject", "MetaverseObject")
                        .WithMany("AttributeValues")
                        .HasForeignKey("MetaverseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObject", "ReferenceValue")
                        .WithMany()
                        .HasForeignKey("ReferenceValueId");

                    b.Navigation("Attribute");

                    b.Navigation("ContributedBySystem");

                    b.Navigation("MetaverseObject");

                    b.Navigation("ReferenceValue");
                });

            modelBuilder.Entity("JIM.Models.Core.ServiceSettings", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "SSOUniqueIdentifierMetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("SSOUniqueIdentifierMetaverseAttributeId");

                    b.Navigation("SSOUniqueIdentifierMetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationObjectType", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.DataGenerationTemplate", null)
                        .WithMany("ObjectTypes")
                        .HasForeignKey("DataGenerationTemplateId");

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "MetaverseObjectType")
                        .WithMany()
                        .HasForeignKey("MetaverseObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaverseObjectType");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.DataGenerationTemplateAttributeDependency", "AttributeDependency")
                        .WithMany()
                        .HasForeignKey("AttributeDependencyId");

                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "ConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.DataGeneration.DataGenerationObjectType", null)
                        .WithMany("TemplateAttributes")
                        .HasForeignKey("DataGenerationObjectTypeId");

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId");

                    b.Navigation("AttributeDependency");

                    b.Navigation("ConnectedSystemAttribute");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttributeDependency", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttributeWeightedValue", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", null)
                        .WithMany("WeightedStringValues")
                        .HasForeignKey("DataGenerationTemplateAttributeId");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSetInstance", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", "DataGenerationTemplateAttribute")
                        .WithMany("ExampleDataSetInstances")
                        .HasForeignKey("DataGenerationTemplateAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.DataGeneration.ExampleDataSet", "ExampleDataSet")
                        .WithMany("ExampleDataSetInstances")
                        .HasForeignKey("ExampleDataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataGenerationTemplateAttribute");

                    b.Navigation("ExampleDataSet");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSetValue", b =>
                {
                    b.HasOne("JIM.Models.DataGeneration.ExampleDataSet", null)
                        .WithMany("Values")
                        .HasForeignKey("ExampleDataSetId");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.Function", b =>
                {
                    b.HasOne("JIM.Models.Extensibility.FunctionLibrary", "FunctionLibrary")
                        .WithMany()
                        .HasForeignKey("FunctionLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionLibrary");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionParameter", b =>
                {
                    b.HasOne("JIM.Models.Extensibility.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObjectType", "ConnectedSystemObjectType")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "MetaverseObjectType")
                        .WithMany()
                        .HasForeignKey("MetaverseObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("ConnectedSystemObjectType");

                    b.Navigation("MetaverseObjectType");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.HasOne("JIM.Models.Logic.SyncRule", "SynchronisationRule")
                        .WithMany("Mappings")
                        .HasForeignKey("SynchronisationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "TargetConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("TargetConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "TargetMetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("TargetMetaverseAttributeId");

                    b.Navigation("SynchronisationRule");

                    b.Navigation("TargetConnectedSystemAttribute");

                    b.Navigation("TargetMetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "ConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Extensibility.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId");

                    b.HasOne("JIM.Models.Logic.SyncRuleMapping", null)
                        .WithMany("Sources")
                        .HasForeignKey("SyncRuleMappingId");

                    b.Navigation("ConnectedSystemAttribute");

                    b.Navigation("Function");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSourceParamValue", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "ConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Extensibility.FunctionParameter", "FunctionParameter")
                        .WithMany()
                        .HasForeignKey("FunctionParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId");

                    b.HasOne("JIM.Models.Logic.SyncRuleMappingSource", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("SyncRuleMappingSourceId");

                    b.Navigation("ConnectedSystemAttribute");

                    b.Navigation("FunctionParameter");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearch", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "MetaverseObjectType")
                        .WithMany("PredefinedSearches")
                        .HasForeignKey("MetaverseObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaverseObjectType");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchAttribute", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany("PredefinedSearchAttributes")
                        .HasForeignKey("MetaverseAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Search.PredefinedSearch", "PredefinedSearch")
                        .WithMany("Attributes")
                        .HasForeignKey("PredefinedSearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaverseAttribute");

                    b.Navigation("PredefinedSearch");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchCriteria", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Search.PredefinedSearchCriteriaGroup", null)
                        .WithMany("Criteria")
                        .HasForeignKey("PredefinedSearchCriteriaGroupId");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchCriteriaGroup", b =>
                {
                    b.HasOne("JIM.Models.Search.PredefinedSearchCriteriaGroup", "ParentGroup")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentGroupId");

                    b.HasOne("JIM.Models.Search.PredefinedSearch", null)
                        .WithMany("CriteriaGroups")
                        .HasForeignKey("PredefinedSearchId");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystem", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectorDefinition", "ConnectorDefinition")
                        .WithMany("ConnectedSystems")
                        .HasForeignKey("ConnectorDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectorDefinition");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttribute", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemObjectType", "ConnectedSystemObjectType")
                        .WithMany("Attributes")
                        .HasForeignKey("ConnectedSystemObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystemObjectType");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttributeValue", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObject", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("ConnectedSystemObjectId");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemContainer", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemContainer", null)
                        .WithMany("ChildContainers")
                        .HasForeignKey("ConnectedSystemContainerId");

                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId");

                    b.HasOne("JIM.Models.Staging.ConnectedSystemPartition", "Partition")
                        .WithMany("Containers")
                        .HasForeignKey("PartitionId");

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("Objects")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObject", "MetaverseObject")
                        .WithMany()
                        .HasForeignKey("MetaverseObjectId");

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "UniqueIdentifierAttribute")
                        .WithMany()
                        .HasForeignKey("UniqueIdentifierAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("MetaverseObject");

                    b.Navigation("Type");

                    b.Navigation("UniqueIdentifierAttribute");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObjectType", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("ObjectTypes")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemPartition", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("Partitions")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemRunProfile", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("RunProfiles")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemPartition", "Partition")
                        .WithMany()
                        .HasForeignKey("PartitionId");

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Partition");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemSettingValue", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("SettingValues")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectorDefinitionSetting", "Setting")
                        .WithMany("Values")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinitionFile", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectorDefinition", "ConnectorDefinition")
                        .WithMany("Files")
                        .HasForeignKey("ConnectorDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectorDefinition");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinitionSetting", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectorDefinition", null)
                        .WithMany("Settings")
                        .HasForeignKey("ConnectorDefinitionId");
                });

            modelBuilder.Entity("JIM.Models.Transactional.PendingExport", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany("PendingExports")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObject", "ConnectedSystemObject")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemObjectId");

                    b.Navigation("ConnectedSystem");

                    b.Navigation("ConnectedSystemObject");
                });

            modelBuilder.Entity("JIM.Models.Transactional.PendingExportAttributeValueChange", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Transactional.PendingExport", null)
                        .WithMany("AttributeValueChanges")
                        .HasForeignKey("PendingExportId");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRunObject", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemObject", "ConnectedSystemObject")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemObjectId");

                    b.HasOne("JIM.Models.Transactional.PendingExport", "PendingExport")
                        .WithMany()
                        .HasForeignKey("PendingExportId");

                    b.HasOne("JIM.Models.Transactional.SyncRun", "SynchronisationRun")
                        .WithMany("Objects")
                        .HasForeignKey("SynchronisationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystemObject");

                    b.Navigation("PendingExport");

                    b.Navigation("SynchronisationRun");
                });

            modelBuilder.Entity("MetaverseAttributeMetaverseObjectType", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", null)
                        .WithMany()
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", null)
                        .WithMany()
                        .HasForeignKey("MetaverseObjectTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetaverseObjectRole", b =>
                {
                    b.HasOne("JIM.Models.Security.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObject", null)
                        .WithMany()
                        .HasForeignKey("StaticMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseAttribute", b =>
                {
                    b.Navigation("PredefinedSearchAttributes");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectType", b =>
                {
                    b.Navigation("PredefinedSearches");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationObjectType", b =>
                {
                    b.Navigation("TemplateAttributes");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplate", b =>
                {
                    b.Navigation("ObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.DataGenerationTemplateAttribute", b =>
                {
                    b.Navigation("ExampleDataSetInstances");

                    b.Navigation("WeightedStringValues");
                });

            modelBuilder.Entity("JIM.Models.DataGeneration.ExampleDataSet", b =>
                {
                    b.Navigation("ExampleDataSetInstances");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearch", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("CriteriaGroups");
                });

            modelBuilder.Entity("JIM.Models.Search.PredefinedSearchCriteriaGroup", b =>
                {
                    b.Navigation("ChildGroups");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystem", b =>
                {
                    b.Navigation("ObjectTypes");

                    b.Navigation("Objects");

                    b.Navigation("Partitions");

                    b.Navigation("PendingExports");

                    b.Navigation("RunProfiles");

                    b.Navigation("SettingValues");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemContainer", b =>
                {
                    b.Navigation("ChildContainers");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObjectType", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemPartition", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinition", b =>
                {
                    b.Navigation("ConnectedSystems");

                    b.Navigation("Files");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectorDefinitionSetting", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("JIM.Models.Transactional.PendingExport", b =>
                {
                    b.Navigation("AttributeValueChanges");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.Navigation("Objects");
                });
#pragma warning restore 612, 618
        }
    }
}
