@page "/admin/connected-systems/connectors/{Id:int}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Interfaces;
@using JIM.Models.Staging;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Connector: @_connector?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connector:</span> @_connector?.Name</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@if (_connector != null)
{
    <MudText Typo="Typo.h5" Class="mt-5">Details</MudText>
    <MudPaper Class="pa-5 mt-5" Outlined="true">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudField Label="Description" Variant="Variant.Outlined">@_connector.Description</MudField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudField Label="Url" Variant="Variant.Outlined"><MudLink Href="@_connector.Url">@_connector.Url</MudLink></MudField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudField Label="Built-in?" Variant="Variant.Outlined">@(_connector.BuiltIn ? "Yes" : "No")</MudField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                    <MudField Label="Created" Variant="Variant.Outlined">@_connector.Created</MudField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                    <MudField Label="Last Updated" Variant="Variant.Outlined">@(_connector.LastUpdated.HasValue ? _connector.LastUpdated : "-")</MudField>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudText Typo="Typo.h5" Class="mt-5">Capabilities</MudText>
    <MudPaper Class="pa-5 mt-5" Outlined="true">
        <MudCheckBox @bind-Checked="@_connector.SupportsFullImport" Disabled="true">Supports full import?</MudCheckBox>
        <MudCheckBox @bind-Checked="@_connector.SupportsDeltaImport" Disabled="true">Supports delta import?</MudCheckBox>
        <MudCheckBox @bind-Checked="@_connector.SupportsExport" Disabled="true">Supports export?</MudCheckBox>
        <MudCheckBox @bind-Checked="@_connector.SupportsSecondaryExternalId" Disabled="true">Supports secondary external id?</MudCheckBox>
        <MudCheckBox @bind-Checked="@_connector.SupportsUserSelectedExternalId" Disabled="true">Supports user selected external id?</MudCheckBox>
        <MudCheckBox @bind-Checked="@_connector.SupportsUserSelectedAttributeTypes" Disabled="true">Supports user selected attribute types?</MudCheckBox>
    </MudPaper>

    <MudTable Items="@_connector.Files" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Outlined="true" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Files</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectorDefinitionFile, object>(x => x.Filename)">Filename</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectorDefinitionFile, object>(x => x.FileSizeBytes)">Filesize (kb)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectorDefinitionFile, object>(x => GetFileInterfaces(x))">Interfaces</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectorDefinitionFile, object>(x => x.Version)">Version</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Filename">@context.Filename</MudTd>
            <MudTd DataLabel="Filesize (kb)">@(context.FileSizeBytes/1000)</MudTd>
            <MudTd DataLabel="Interfaces">@GetFileInterfaces(context)</MudTd>
            <MudTd DataLabel="Version">@context.Version</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            @if (_connector.BuiltIn)
            {
                <MudText>No files due to it being a built-in connector</MudText>
            }
            else
            {
                <MudText>No files. Upload some to make this connector functional</MudText>
            }
        </NoRecordsContent>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ConnectorDefinition? _connector;
    private List<BreadcrumbItem> _breadcrumbs = null!;

    protected override async Task OnInitializedAsync()
    {
        _connector = await Jim.ConnectedSystems.GetConnectorDefinitionAsync(Id);
        if (_connector == null)
        {
            // connector definition not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Connected Systems", href: "/admin/connected-systems/"),
            new("Connectors", href: "/admin/connected-systems/connectors/"),
            new(_connector.Name, href: null, disabled: true)
        };
    }

    private static string GetFileInterfaces(ConnectorDefinitionFile file)
    {
        var interfaces = "";
        if (file.ImplementsIConnector)
            interfaces += nameof(IConnector) + ", ";

        if (file.ImplementsICapabilities)
            interfaces += nameof(IConnectorCapabilities) + ", ";

        if (file.ImplementsISettings)
            interfaces += nameof(IConnectorSettings) + ", ";

        if (file.ImplementsIContainers)
            interfaces += nameof(IConnectorContainers) + ", ";

        if (file.ImplementsISchema)
            interfaces += nameof(IConnectorSchema) + ", ";

        if (file.ImplementsIExportUsingCalls)
            interfaces += nameof(IConnectorExportUsingCalls) + ", ";

        if (file.ImplementsIExportUsingFiles)
            interfaces += nameof(IConnectorExportUsingFiles) + ", ";

        if (file.ImplementsIImportUsingCalls)
            interfaces += nameof(IConnectorImportUsingCalls) + ", ";

        if (file.ImplementsIImportUsingFiles)
            interfaces += nameof(IConnectorImportUsingFiles) + ", ";

        if (interfaces != "")
            interfaces = interfaces.Substring(0, interfaces.Length - 2);

        return interfaces;
    }
}