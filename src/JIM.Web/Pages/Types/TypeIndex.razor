@page "/t/{TypeNameUrlParam}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Utility
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>@MetaverseObjectType?.Name</PageTitle>
<h1>@(MetaverseObjectType?.Name)</h1>
<p class="lead">
    Search or browse for @MetaverseObjectType?.Name
</p>

<div>
    <MetaverseObjectPaginator Results="@MetaverseObjects" />
</div>

<div class="box mt-3">
    <table class="table mt-2">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Created</th>
            </tr>
        </thead>
        <tbody>
            @if (MetaverseObjects != null && MetaverseObjects.Results.Count > 0)
            {
                foreach (var mo in MetaverseObjects.Results)
                {
                    <tr>
                        <td><a href="/t/@(MetaverseObjectType?.Name.ToLower())/@mo.Id">@mo.GetAttributeValue(Constants.BuiltInAttributes.DisplayName)?.StringValue</a></td>
                        <td>@mo.Created</td>
                    </tr>
                }    
            }
            else
            {
                <tr>
                    <td colspan="2" class="lead">No results</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="mt-3">
    <MetaverseObjectPaginator Results="@MetaverseObjects" />
</div>


@code {
    [Parameter]
    public string TypeNameUrlParam { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    private PagedResultSet<MetaverseObject>? MetaverseObjects { get; set; }

    private MetaverseObjectType? MetaverseObjectType { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Page == null || Page < 1)
            Page = 1;

        var typeName = Utilities.ConvertFromUrlParam(TypeNameUrlParam);
        MetaverseObjectType = await Jim.Metaverse.GetMetaverseObjectTypeAsync(typeName, false);
        if (MetaverseObjectType == null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        // get a page of results for the metaverse objects matching this type...
        MetaverseObjects = await Jim.Metaverse.GetMetaverseObjectsOfTypeAsync(MetaverseObjectType, Page.Value, 20, 500);
    }
}