@page "/activity/sync/{Id:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities;
@using JIM.Models.Enums;
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Run Profile Execution Item: @_activityRunProfileExecutionItem.?Id</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Run Profile Execution Item:</span> @(_activityRunProfileExecutionItem != null ? _activityRunProfileExecutionItem.Id : null)</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>

    @if (_activityRunProfileExecutionItem != null)
{
    <MudStack Row="true" Class="mt-5 mb-5">

        @if (_connectedSystemHeader != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Connected System</MudText>
                <MudText><MudLink Href="@Utilities.GetConnectedSystemHref(_connectedSystemHeader)" Typo="Typo.h5">@_connectedSystemHeader.Name</MudLink></MudText>
            </MudPaper>
        }

        @if (_activity != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Run Profile</MudText>
                <MudText Typo="Typo.h5">@_activity.TargetName</MudText>
            </MudPaper>

            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Execution Time</MudText>
                <MudText Typo="Typo.h5">@_activity.Executed</MudText>
            </MudPaper>
        }

        @if (_activity is { InitiatedBy: not null })
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText><MudLink Href="@(Utilities.GetMetaverseObjectHref(_activity.InitiatedBy))" Typo="Typo.h5">@_activity.InitiatedBy.DisplayName</MudLink></MudText>
            </MudPaper>
        }
        else if (_activity != null && !string.IsNullOrEmpty(_activity.InitiatedByName))
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">@_activity.InitiatedByName</MudText>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">System</MudText>
            </MudPaper>
        }

        @if (_activityRunProfileExecutionItem.ConnectedSystemObject != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Connected System Object</MudText>
                <MudText>

                    <MudTooltip Text="Object Type">
                        <MudChip Color="Color.Default" Label="true" Icon="@Icons.Material.Filled.Schema">@_activityRunProfileExecutionItem.ConnectedSystemObject.Type.Name</MudChip>
                    </MudTooltip>

                    <MudChip Color="Color.Info" Variant="Variant.Outlined" Label="true">
                        @if (_externalIdAttributeValue != null)
                        {
                            <MudTooltip Text="External Id Attribute Name">
                                <MudText>@(_externalIdAttributeValue.Attribute.Name):</MudText>
                            </MudTooltip>
                            <span>&nbsp;</span>
                            <MudLink Href="@(Utilities.GetConnectedSystemObjectHref(_activityRunProfileExecutionItem.ConnectedSystemObject))">@_externalIdAttributeValue.ToString()</MudLink>
                        }
                        else
                        {
                            <MudLink Href="@(Utilities.GetConnectedSystemObjectHref(_activityRunProfileExecutionItem.ConnectedSystemObject))">Connected System Object (No External Id yet)</MudLink>
                        }
                    </MudChip>
                </MudText>
            </MudPaper>
        }

        <MudPaper Class="pa-5" Outlined="true" Style="@(_activityRunProfileExecutionItem.ObjectChangeType == ObjectChangeType.Delete ? $"color:{Colors.Red.Lighten5}; background:{Colors.Red.Default};" : null)">
            <MudText Typo="Typo.overline">Change Type</MudText>
            <MudText Typo="Typo.h5">@_activityRunProfileExecutionItem.ObjectChangeType.ToString().SplitOnCapitalLetters()</MudText>
        </MudPaper>

    </MudStack>

    // display a table for what attribute values were changed as a result of this activity
    // todo: change this to a single table and consider multiple columns, i.e. one for remove, one for add
    @if (_activityRunProfileExecutionItem.ConnectedSystemObjectChange != null)
    {
        <MudText Typo="Typo.h5" Class="mb-5">Changes:</MudText>
        <MudSimpleTable Style="overflow-x: auto;" Elevation="0" Outlined="true" Dense="true" Hover="true">
            <thead>
                <tr>
                    <th>External Attribute Name</th>
                    <th>Attribute Change Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var changeAttribute in _activityRunProfileExecutionItem.ConnectedSystemObjectChange.AttributeChanges.OrderBy(q => q.Attribute.Name))
                {
                    for (var i = 0; i < changeAttribute.ValueChanges.Count; i++)
                    {
                        <tr>
                            @if (changeAttribute.ValueChanges.Count == 1)
                            {
                                <td>@changeAttribute.Attribute.Name</td>
                            }
                            else if (i == 0)
                            {
                                <td rowspan="@changeAttribute.ValueChanges.Count">@changeAttribute.Attribute.Name</td>
                            }
                            <td><MudChip Variant="Variant.Text" Color="Helpers.GetMudBlazorColorForValueChangeType(changeAttribute.ValueChanges[i].ValueChangeType)" Class="ml-0">@changeAttribute.ValueChanges[i-1].ValueChangeType</MudChip></td>
                            <td>
                                @if (changeAttribute.ValueChanges[i].ReferenceValue != null)
                                {
                                    var rv = changeAttribute.ValueChanges[i].ReferenceValue;
                                    if (rv != null)
                                    {
                                        <MudChip Color="Color.Default" Size="Size.Small">@rv.Type.Name</MudChip>
                                        <text> </text>
                                        <MudLink Href="@Utilities.GetConnectedSystemObjectHref(rv)">@rv.DisplayNameOrId</MudLink>

                                        if (rv.SecondaryExternalIdAttributeValue != null)
                                        {
                                            <span class="mud-text-secondary"> (@rv.SecondaryExternalIdAttributeValue.ToString())</span>
                                        }
                                    }
                                }
                                else
                                {
                                    @changeAttribute.ValueChanges[i].ToString()
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </MudSimpleTable>
    }

    @if (_activityRunProfileExecutionItem.ErrorType.HasValue)
    {
        <MudPaper Class="pa-4 mt-4" Style="@($"color:{Colors.Shades.White}; background:{Colors.Red.Default};")" Outlined="true">
            @if (!string.IsNullOrEmpty(_activityRunProfileExecutionItem.ErrorMessage))
            {
                <MudText Typo="Typo.button">Error Message:</MudText>
                <MudText>@_activityRunProfileExecutionItem.ErrorMessage</MudText>
                <br />
            }

            @if (!string.IsNullOrEmpty(_activityRunProfileExecutionItem.ErrorStackTrace))
            {
                <MudText Typo="Typo.button">Error Stack:</MudText>
                <pre>
                    @_activityRunProfileExecutionItem.ErrorStackTrace
                </pre>
            }
        </MudPaper>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ActivityRunProfileExecutionItem? _activityRunProfileExecutionItem;
    private Activity? _activity;
    private ConnectedSystemHeader? _connectedSystemHeader;
    private List<BreadcrumbItem> _breadcrumbs = null!;
    private ConnectedSystemObjectAttributeValue? _externalIdAttributeValue;

    protected override async Task OnParametersSetAsync()
    {
        _activityRunProfileExecutionItem = await Jim.Activities.GetActivityRunProfileExecutionItemAsync(Id);
        if (_activityRunProfileExecutionItem == null)
        {
            // ActivityRunProfileExecutionItem not found, redirect to index page
            NavManager.NavigateTo("/activity");
            return;
        }

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Activity", href: "/activity"),
            new("Activity Detail", href: $"/activity/{_activityRunProfileExecutionItem.ActivityId}"),
            new(_activityRunProfileExecutionItem.Id.ToString(), href: null, disabled: true)
        };

        _activity = await Jim.Activities.GetActivityAsync(_activityRunProfileExecutionItem.ActivityId);

        // try and get the external id attribute value. we'll need the value and attribute name
        _externalIdAttributeValue = _activityRunProfileExecutionItem.GetExternalIdAttributeValue();

        // try and get the connected system this relates to (might not exist if it's been deleted)
        var connectedSystemId = _activityRunProfileExecutionItem.GetConnectedSystemId();
        if (connectedSystemId != null)
            _connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(connectedSystemId.Value);
    }
}
