@page "/admin/connected-systems/{Id:int}/{Name}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Connected System: @connectedSystem?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connected System:</span> @connectedSystem?.Name</MudText>
<MudText Typo="Typo.subtitle1">Some aspects of a Connected System can only be configured once basic details and setting values have been provided.</MudText>

@if (connectedSystem != null)
{
    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="false" PanelClass="pt-5" Class="mt-5" Outlined="true">

        <MudTabPanel Text="Details">
            <MudPaper Class="pa-4" Outlined="true">
                <MudForm @bind-IsValid="@IsDetailsFormValid" @bind-Errors="@DetailsFormErrors">
                    <MudTextField T="string" Label="Connector" @bind-Value="connectedSystem.ConnectorDefinition.Name" Disabled="true" Variant="Variant.Outlined" />
                    <MudTextField T="string" Label="Name" @bind-Value="connectedSystem.Name" Required="true" RequiredError="A name is required" Variant="Variant.Outlined" Class="mt-5" />
                    <MudTextField T="string" Label="Description" Required="false" @bind-Value="connectedSystem.Description" Lines="5" Variant="Variant.Outlined" Class="mt-5" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!IsDetailsFormValid)" Class="mt-5" OnClick="HandleValidDetailsSubmitAsync">Save Changes</MudButton>
                </MudForm>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="Settings">
            <MudText>Configure the connector for your environment by supplying values for the settings below.</MudText>
            <MudForm @bind-IsValid="@IsSettingsFormValid" @bind-Errors="@SettingsFormErrors" Class="mt-5">
                @if (settingCategories != null)
                {
                    @for (var i = 0; i < settingCategories.Count; i++)
                    {
                        var formElementName = "something-" + i;
                        var settingCategory = @settingCategories[i];
                        <MudText Typo="Typo.h5" Class="mt-5">@settingCategory.ToString()</MudText>
                        <MudPaper Class="pa-4 mt-5" Outlined="true">
                            @foreach (var settingValue in connectedSystem.SettingValues.Where(sv => sv.Setting.Category == settingCategory))
                            {
                                if (settingValue.Setting.Type == ConnectedSystemSettingType.Heading)
                                {
                                    <MudText Typo="Typo.h6" Class="mb-5">@settingValue.Setting.Name</MudText>
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.Divider)
                                {
                                    <hr />
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.String)
                                {
                                    <MudTextField T="string"
                              Label="@settingValue.Setting.Name"
                              @bind-Value="settingValue.StringValue"
                              Required="@settingValue.Setting.Required"
                              RequiredError="@($"A {settingValue.Setting.Name} is required")"
                              HelperText="@settingValue.Setting.Description"
                              Variant="Variant.Outlined"
                              Class="mb-5" />
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.StringEncrypted)
                                {
                                    <MudTextField T="string"
                              Label="@settingValue.Setting.Name"
                              @bind-Value="settingValue.StringEncryptedValue"
                              Required="@settingValue.Setting.Required"
                              RequiredError="@($"A {settingValue.Setting.Name} is required")"
                              HelperText="@settingValue.Setting.Description"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Class="mb-5" />
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.Integer)
                                {
                                    <MudTextField T="int?"
                              Label="@settingValue.Setting.Name"
                              @bind-Value="settingValue.IntValue"
                              Required="@settingValue.Setting.Required"
                              RequiredError="@($"A {settingValue.Setting.Name} is required")"
                              HelperText="@settingValue.Setting.Description"
                              InputType="InputType.Number"
                              Variant="Variant.Outlined"
                              Class="mb-5" />
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.CheckBox)
                                {
                                    <MudSwitch @bind-Checked="settingValue.CheckboxValue" Color="Color.Primary" Label="@settingValue.Setting.Name" Class="mb-5" />
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.DropDown && settingValue.Setting.DropDownValues != null)
                                {
                                    <MudSelect @bind-Value="settingValue.StringValue" HelperText="@settingValue.Setting.Description" Label="@settingValue.Setting.Name" Variant="Variant.Outlined" Class="mb-5">
                                        @foreach (var dropDownValue in settingValue.Setting.DropDownValues)
                                        {
                                            <option value="@dropDownValue">@dropDownValue</option>
                                        }
                                    </MudSelect>
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.Label)
                                {
                                    <MudText Class="mb-5">
                                        @settingValue.Setting.Description
                                    </MudText>
                                }
                                else if (settingValue.Setting.Type == ConnectedSystemSettingType.File)
                                {
                                    <MudText Class="mt-b">Files not yet supported for settings.</MudText>
                                }
                                else
                                {
                                    <MudText Class="mt-b">Oops. Unknown setting type!</MudText>
                                }
                            }
                        </MudPaper>
                    }
                }

                @if (SettingsFormCustomErrors.Any())
                {
                    <MudAlert Severity="Severity.Error" Class="mt-5">
                        <MudText>There are issues with the settings:</MudText>
                        <ul class="mt-5">
                            @foreach (var error in SettingsFormCustomErrors)
                            {
                                <li>@error.Key: @error.Value</li>
                            }
                        </ul>
                    </MudAlert>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!IsSettingsFormValid)" Class="mt-5" OnClick="HandleValidSettingsSubmitAsync">Save Settings</MudButton>
            </MudForm>
        </MudTabPanel>

        <MudTabPanel Text="Schema" Disabled="@AreSettingDependentTabsDisabled()">

            <MudAlert Severity="(connectedSystem.ObjectTypes != null && connectedSystem.ObjectTypes.Count > 0 ? Severity.Warning : Severity.Info)">
                @if (connectedSystem.ObjectTypes == null || connectedSystem.ObjectTypes.Count == 0)
                {
                    <MudText>Retrieve the schema from the connected system, to be able to select which object types and attributes you want to manage with JIM.</MudText>
                }
                else
                {
                    <MudText>
                        <strong>Refreshing the schema can result in data-loss</strong>. If object types or attributes are discovered to have been removed at the connected system, then this will result in all references to them being removed from within JIM,
                        i.e. synchronisation rules, attribute flow, attributes values and even entire objects will be deleted if object types are removed. Refresh with caution. Ensure the Connected System identity has the right
                        permissions needed to retrieve the schema, and consider a database backup before proceeeding.
                    </MudText>
                }
                <MudButton Color="(connectedSystem.ObjectTypes == null || connectedSystem.ObjectTypes.Count == 0 ? Color.Info : Color.Warning)" Variant="Variant.Filled" Size="Size.Small" OnClick="HandleImportSchemaAsync" Class="mt-5">
                    @if (connectedSystem.ObjectTypes == null || connectedSystem.ObjectTypes.Count == 0)
                    {
                        <text>Retrieve Schema</text>
                    }
                    else
                    {
                        <text>Refresh Schema</text>
                    }
                </MudButton>
            </MudAlert>

            @if (connectedSystem.ObjectTypes != null && connectedSystem.ObjectTypes.Count > 0)
            {
                <MudPaper Outlined="true" Class="pa-4 mt-5">
                    <MudText Typo="Typo.caption" Class="d-flex flex-grow-1 flex-wrap justify-center align-center">Select which object types you would like to manage with JIM.</MudText>
                    <div class="d-flex flex-grow-1 flex-wrap justify-center align-center">
                    @foreach (var objectType in connectedSystem.ObjectTypes)
                    {
                        <MudCheckBox @bind-Checked="@objectType.Selected" Color="Color.Primary" Label="@objectType.Name" />
                    }
                    </div>
                </MudPaper>

                <MudText Class="mt-5">Select which attributes you would like to manage for this object type. To maximise performance, only select those that need managing.</MudText>
                <MudExpansionPanels MultiExpansion="true" Class="mt-5">
                    @for (var i = 0; i < connectedSystem.ObjectTypes.Count; i++)
                    {
                        var objectType = connectedSystem.ObjectTypes[i];
                        <MudExpansionPanel Text="@objectType.Name">
                            <MudText>Select the @objectType.Name attributes you want to manage.</MudText>
                            <div class="mt-5 mb-5">
                                <MudButton Size="Size.Small" Variant="Variant.Outlined">Select All</MudButton>
                                <MudButton Size="Size.Small" Variant="Variant.Outlined">Clear All</MudButton>
                            </div>

                            <MudTable Items="@objectType.Attributes" Hover="true" Breakpoint="Breakpoint.Sm" Class="mb-5" SortLabel="Sort By" Filter="new Func<ConnectedSystemAttribute,bool>(SchemaFilterFuncHandler)">
                                <ToolBarContent>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="schemaSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemAttribute, object>(x => x.Selected)">Selected</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemAttribute, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemAttribute, object>(x => x.ClassName)">Class</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemAttribute, object>(x => x.AttributePlurality)">Plurality</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemAttribute, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Selected">
                                        <MudSwitch @bind-Checked="@context.Selected" Color="@Color.Primary"></MudSwitch>
                                    </MudTd>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Class">@context.ClassName</MudTd>
                                    <MudTd DataLabel="Plurality">@context.AttributePlurality.ToString().SplitOnCapitalLetters()</MudTd>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    There are no attributes
                                </NoRecordsContent>
                            </MudTable>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleObjectTypesAndAttributeSelectionSubmitAsync" Class="mt-5">Save Changes</MudButton>
            }

        </MudTabPanel>

        @if (connectedSystem.ConnectorDefinition.SupportsPartitions)
        {
            <MudTabPanel Text="Partitions & Containers" Disabled="@AreSettingDependentTabsDisabled()">

                <MudAlert Severity="(connectedSystem.Partitions != null && connectedSystem.Partitions.Count > 0 ? Severity.Warning : Severity.Info)">
                    @if (connectedSystem.Partitions == null || connectedSystem.Partitions.Count == 0)
                    {
                        <MudText>Retrieve the hierarchy @partitionAndHierarchyText hierarchy from the connected system, to be able to select which ones you want to manage with JIM.</MudText>
                    }
                    else
                    {
                        <MudText>
                            <strong>Refreshing the @partitionAndHierarchyText heirarchy can result in data-loss</strong>. If partitions and/or containers are removed, then this will result in all objects in them being deleted
                            from the Connected System, which depending on your configuration, could result in those objects being deprovisioned from the Metaverse and any downstream Connected Systems. Refresh with caution.
                            Ensure the Connected System identity has the right permissions needed to retrieve the heirarchy, and consider a database backup before proceeeding.
                        </MudText>
                    }
                    <MudButton Disabled="@hierarchyBeingRetrieved"
                       Color="(connectedSystem.Partitions == null || connectedSystem.Partitions.Count == 0 ? Color.Primary : Color.Warning)"
                       Size="Size.Small"
                       OnClick="HandleImportHierarchyAsync"
                       Variant="Variant.Filled"
                       Class="mt-5">
                        @if (hierarchyBeingRetrieved)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            if (connectedSystem.Partitions?.Count == 0)
                            {
                                <text>Retrieve Hierarchy</text>
                            }
                            else
                            {
                                <text>Refresh Hierarchy</text>
                            }
                        }
                    </MudButton>
                </MudAlert>

                @if (connectedSystem.Partitions != null && connectedSystem.Partitions.Count > 0)
                {
                    <MudText Class="mt-5">Select which @partitionsAndHierarchiesText are to be managed by JIM here. To maximise performance, only select those that need managing.</MudText>

                    @for (var i = 0; i < connectedSystem.Partitions.Count; i++)
                    {
                        var partition = connectedSystem.Partitions[i];

                        <MudPaper Class="pa-4 mt-5" Outlined="true">
                            <MudText Typo="Typo.h5" Class="mb-5">@partition.Name</MudText>
                            <MudText>Select the containers you want to manage in this partition.</MudText>

                            <MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined" Class="mt-5 mb-5">
                                <MudButton>Select All</MudButton>
                                <MudButton>Clear All</MudButton>
                            </MudButtonGroup>

                            <MudTreeView Items="@partition.Containers">
                                <ItemTemplate>
                                    <MudTreeViewItem @bind-Expanded="@context.Expanded" Items="@context.ChildContainers">
                                        <Content>
                                            <MudTreeViewItemToggleButton @bind-Expanded="@context.Expanded" Visible="@(context.ChildContainers.Count > 0)" />

                                            @if (context.Included)
                                            {
                                                <MudCheckBox T="bool?"
                                                 Checked="@(context.AreAnyChildContainersSelected() ? null : context.Selected)"
                                                 CheckedChanged="@((e) => ConnectedSystemContainerSelectedChanged(context, e))"
                                                 UncheckedIcon="@Icons.Material.Outlined.FilterCenterFocus"
                                                 title="Included"
                                                 Disabled="true"/>
                                            }
                                            else
                                            {
                                                <MudCheckBox T="bool?"
                                                 Checked="@(context.AreAnyChildContainersSelected() ? null : context.Selected)"
                                                 CheckedChanged="@((e) => ConnectedSystemContainerSelectedChanged(context, e))"
                                                 title="@(context.Selected ? "Selected" : "")"/>
                                            }

                                            <MudText>@context.Name</MudText>
                                        </Content>
                                    </MudTreeViewItem>
                                </ItemTemplate>
                            </MudTreeView>

                        </MudPaper>
                    }

                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleHierarchySelectionSubmitAsync" Class="mt-5">Save Changes</MudButton>
                }
            </MudTabPanel>
        }

    </MudTabs>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private ConnectedSystem? connectedSystem;
    private List<ConnectedSystemSettingCategory>? settingCategories;
    private string? partitionsAndHierarchiesText;
    private string? partitionAndHierarchyText;
    private bool schemaBeingRetrieved;
    private bool hierarchyBeingRetrieved;

    private bool IsDetailsFormValid { get; set; }
    private string[] DetailsFormErrors { get; set; } = { };
    private bool IsSettingsFormValid { get; set; }
    private string[] SettingsFormErrors { get; set; } = { };
    private Dictionary<string, string> SettingsFormCustomErrors { get; set; } = new Dictionary<string, string>();
    private string schemaSearchString = "";

    protected override async Task OnInitializedAsync()
    {
        connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(Id);
        if (connectedSystem == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        // get a list of the distinct setting categories in use, so we can render them in category blocks
        settingCategories = connectedSystem.SettingValues.Select(q => q.Setting.Category).Distinct().ToList();

        // to save us having to perform this comparison all over the view
        if (connectedSystem.ConnectorDefinition.SupportsPartitions && connectedSystem.ConnectorDefinition.SupportsPartitionContainers)
        {
            partitionsAndHierarchiesText = "partitions and containers";
            partitionAndHierarchyText = "partition and container";
        }
        else if (connectedSystem.ConnectorDefinition.SupportsPartitions)
        {
            partitionsAndHierarchiesText = "partitions";
            partitionAndHierarchyText = "partition";
        }

        ApplyContainerIncludedToPartitions(connectedSystem);
    }

    private bool AreSettingDependentTabsDisabled()
    {
        if (connectedSystem == null)
            return true;
        else if (connectedSystem.SettingValuesValid)
            return false;
        else
            return true;
    }

    private async Task HandleValidDetailsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidDetailsSubmitAsync)}: connectedSystem was null");
            return;
        }

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your details changes have been saved.", Severity.Success);
    }

    private async Task HandleValidSettingsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidSettingsSubmitAsync)}: connectedSystem was null");
            return;
        }

        // validate the form
        SettingsFormCustomErrors.Clear();
        var results = Jim.ConnectedSystems.ValidateConnectedSystemSettings(connectedSystem);
        for (var i = 0; i < results.Count; i++)
        {
            var result = results[i];
            if (result.IsValid)
                continue;

            if (result.SettingValue != null && result.SettingValue.Setting != null && result.SettingValue.Setting.Name != null && !string.IsNullOrEmpty(result.ErrorMessage))
                SettingsFormCustomErrors.Add(result.SettingValue.Setting.Name, result.ErrorMessage);
            else if (result.SettingValue == null && !string.IsNullOrEmpty(result.ErrorMessage))
                SettingsFormCustomErrors.Add($"General issue {i + 1}", result.ErrorMessage);
        }

        if (SettingsFormCustomErrors.Any())
            return;

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your setting changes have been saved.", Severity.Success);
    }

    private async Task HandleImportSchemaAsync()
    {
        if (connectedSystem == null)
            return;

        schemaBeingRetrieved = true;
        await Jim.ConnectedSystems.ImportConnectedSystemSchemaAsync(connectedSystem);
        schemaBeingRetrieved = false;
    }

    private async Task HandleObjectTypesAndAttributeSelectionSubmitAsync()
    {
        if (connectedSystem == null)
            return;

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your attribute changes have been saved.", Severity.Success);
    }

    private async Task HandleImportHierarchyAsync()
    {
        if (connectedSystem == null)
            return;

        hierarchyBeingRetrieved = true;
        await Jim.ConnectedSystems.ImportConnectedSystemHierarchyAsync(connectedSystem);
        hierarchyBeingRetrieved = false;
    }

    private async Task HandleHierarchySelectionSubmitAsync()
    {
        if (connectedSystem == null)
            return;

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your hierarchy changes have been saved.", Severity.Success);
    }

    private bool SchemaFilterFuncHandler(ConnectedSystemAttribute element) => SchemaFilterFunc(element, schemaSearchString);

    private bool SchemaFilterFunc(ConnectedSystemAttribute element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.ClassName != null && element.ClassName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Description != null && element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void ConnectedSystemContainerSelectedChanged(ConnectedSystemContainer container, bool? newCheckboxValue)
    {
        // if included and clicked, change to not included, not selected
        if (container.Included)
        {
            container.Selected = false;
            container.Included = false;
        }
        else
        {
            // toggle the current setting
            container.Selected = !container.Selected;
            container.Included = false;
        }

        // set the right selected/included values for all children
        if (container.Selected)
        {
            // all children should be included and not selected
            foreach (ConnectedSystemContainer child in container.ChildContainers)
            {
                child.Included = true;
                child.Selected = false;
                ApplyContainerStatusDownBranch(child, false, true);
            }
        }
        else
        {
            // all children should be not selected and not included
            foreach (ConnectedSystemContainer child in container.ChildContainers)
            {
                child.Included = false;
                child.Selected = false;                
                ApplyContainerStatusDownBranch(child, false, false);
            }
        }

        // set the parent(s) if necessary
        if (container.ParentContainer != null)
        {
            // go up a level. if all children are selected, then make parent selected and all children (resursively) included.
            CorrectUpwardContainerStatus(container.ParentContainer);
        }
    }

    private void ApplyContainerStatusDownBranch(ConnectedSystemContainer container, bool selected, bool included)
    {
        foreach (ConnectedSystemContainer child in container.ChildContainers)
        {
            child.Included = included;
            child.Selected = selected;
            ApplyContainerStatusDownBranch(child, selected, included);
        }
    }

    private void ApplyContainerIncludedToPartitions(ConnectedSystem connectedSystem)
    {
        if (connectedSystem.Partitions == null)
            return;

        foreach (var partition in connectedSystem.Partitions.Where(p => p.Containers != null))
            foreach (var container in partition.Containers)
                ApplyContainerIncludedRecursively(container, container.Selected);
    }

    private void ApplyContainerIncludedRecursively(ConnectedSystemContainer connectedSystemContainer, bool aParentWasSelected)
    {
        foreach (var childContainer in connectedSystemContainer.ChildContainers)
        {
            var shouldChildBeIncluded = aParentWasSelected;

            // parent was selected, so this child container should be marked as included
            if (aParentWasSelected)
                childContainer.Included = true;

            // if this child container is selected, then it's children should be marked as included
            if (childContainer.Selected)
                shouldChildBeIncluded = true;

            ApplyContainerIncludedRecursively(childContainer, shouldChildBeIncluded);
        }
    }

    private void CorrectUpwardContainerStatus(ConnectedSystemContainer parentContainer)
    {
        if (parentContainer.ChildContainers.All(q => q.Selected))
        {
            parentContainer.Selected = true;
            parentContainer.Included = false;

            foreach (var childContainer in parentContainer.ChildContainers)
            {
                childContainer.Selected = false;
                childContainer.Included = true;
                ApplyContainerStatusDownBranch(childContainer, false, true);
            }
        }

        if (parentContainer.ParentContainer != null)
            CorrectUpwardContainerStatus(parentContainer.ParentContainer);
    }
}