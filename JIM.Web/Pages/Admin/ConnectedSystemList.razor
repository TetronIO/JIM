@page "/admin/connected-systems"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.DTOs
@using JIM.Models.Staging.DTOs
@using JIM.Utilities;
@inject JimApplication Jim

<PageTitle>Connected Systems</PageTitle>
<MudText Typo="Typo.h4">Connected Systems</MudText>
<MudBreadcrumbs Items="breadcrumbs" Class="ps-0"></MudBreadcrumbs>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
    JIM imports from and exports data to connected systems using Connectors.
    @if (connectedSystemHeaders == null || connectedSystemHeaders.Count == 0)
    {
        <span>Configure at least one connected system to get going.</span>
    }
</MudText>

<MudPaper Elevation="0" Class="mt-2" Outlined="true">
    <MudToolBar>
        <MudButton Href="/admin/connected-systems" Color="Color.Primary" DisableElevation="true" Disabled="true">Connected Systems</MudButton>
        <MudButton Href="/admin/connected-systems/connectors" Color="Color.Primary" DisableElevation="true">Connectors</MudButton>
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Href="/admin/connected-systems/create" Color="Color.Primary" DisableElevation="true">Create Connected System</MudButton>
    </MudToolBar>
</MudPaper>

<MudTable Items="@connectedSystemHeaders" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Filter="new Func<ConnectedSystemHeader,bool>(FilterFunc1)" Outlined="true" Elevation="0">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.ObjectCount)">Objects</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.ConnectorsCount)">Connected Objects (%)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.PendingExportObjectsCount)">Pending Exports (%)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemHeader, object>(x => x.ConnectorName)">Connector</MudTableSortLabel></MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@(Utilities.GetConnectedSystemHref(context))">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Objects">@context.ObjectCount.ToString("N0")</MudTd>
        <MudTd DataLabel="Connected Objects (%)">@context.ConnectorsCount.ToString("N0") @((MarkupString)GetPercentageStatement(context.ObjectCount, context.ConnectorsCount))</MudTd>
        <MudTd DataLabel="Pending Exports (%)">@context.PendingExportObjectsCount.ToString("N0") @((MarkupString)GetPercentageStatement(context.ObjectCount, context.PendingExportObjectsCount))</MudTd>
        <MudTd DataLabel="Connector">@context.ConnectorName</MudTd>
            <MudTd DataLabel="Action">
                <MudButton Href="@Utilities.GetConnectedSystemObjectsHref(context)"
                           Variant="Variant.Outlined"
                           StartIcon="@Icons.Material.Filled.List"
                           Color="Color.Default"
                           Size="Size.Small"
                           DisableElevation="true">
                    Objects
                </MudButton>
            </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        There are no connected systems
    </NoRecordsContent>
</MudTable>

@code {
    private IList<ConnectedSystemHeader>? connectedSystemHeaders;
    private string searchString = "";

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Connected Systems", href: null, disabled: true),
    };

    protected override async Task OnInitializedAsync()
    {
        connectedSystemHeaders = await Jim.ConnectedSystems.GetConnectedSystemHeadersAsync();
    }

    private string GetPercentageStatement(int bigNumber, int smallNumber)
    {
        if (bigNumber == 0 || smallNumber == 0)
            return string.Empty;

        var percentage = 100 / bigNumber * smallNumber;
        return $"({percentage}%)";
    }

    private bool FilterFunc1(ConnectedSystemHeader element) => FilterFunc(element, searchString);

    private bool FilterFunc(ConnectedSystemHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}