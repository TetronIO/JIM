@page "/admin/connected-systems"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@inject JimApplication Jim

<PageTitle>Connected Systems</PageTitle>
<h1>Connected Systems</h1>
<p class="light">
    JIM imports from and exports data to connected systems using connectors. 
    @if(connectedSystemHeaders == null || connectedSystemHeaders.Count == 0)
    {
     <span>Configure at least one connected system to get going.</span>
    }
</p>

<div class="box mt-3">

    <div class="row">
        <div class="col">
            <div class="btn-group btn-group-sm" role="group" aria-label="Navigation options">
                <a class="btn btn-outline-secondary active" aria-current="page" href="/admin/connected-systems">Connected Systems</a>
                <a class="btn btn-outline-secondary" href="/admin/connected-systems/connectors">Connectors</a>
            </div>
        </div>
        <div class="col text-end">
            <a class="btn btn-outline-primary btn-sm" href="/admin/connected-systems/create"><i class="bi bi-node-plus"></i> Create Connected System</a>
        </div>
    </div>

    <table class="table mt-2">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Objects</th>
                <th scope="col">Connected Objects (%)</th>
                <th scope="col">Pending Exports (%)</th>
                <th scope="col">Connector</th>
            </tr>
        </thead>
        <tbody>
            @if (connectedSystemHeaders != null && connectedSystemHeaders.Count > 0)
            {
                foreach (var header in connectedSystemHeaders)
                {
                    <tr>
                        <td><a href="/admin/connected-systems/@(header.Id)/@(Utilities.ConvertToUrlParam(header.Name))">@header.Name</a></td>
                        <td>@header.Description</td>
                        <td>@header.ObjectCount.ToString("N0")</td>
                        <td>@header.ConnectorsCount.ToString("N0") @((MarkupString)GetPercentageStatement(header.ObjectCount, header.ConnectorsCount))</td>
                        <td>@header.PendingExportObjectsCount.ToString("N0") @((MarkupString)GetPercentageStatement(header.ObjectCount, header.PendingExportObjectsCount))</td>
                        <td>@header.ConnectorName</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="light text-center">No connected systems yet</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private IList<ConnectedSystemHeader>? connectedSystemHeaders;

    protected override async Task OnInitializedAsync()
    {
        connectedSystemHeaders = await Jim.ConnectedSystems.GetConnectedSystemHeadersAsync();
    }

    private string GetPercentageStatement(int bigNumber, int smallNumber)
    {
        if (bigNumber == 0 || smallNumber == 0)
            return string.Empty;

        var percentage = 100 / bigNumber * smallNumber;
        return $"({percentage}%)";
    }
}