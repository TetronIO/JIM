@page "/admin/connected-systems/create"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Create a Connected System</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connected Systems:</span> New</MudText>
<MudText Typo="Typo.subtitle1">Provide some basic details here, and then we'll move on to configuring the Connected System.</MudText>
 
<MudPaper Class="pa-4 mt-5" Outlined="true">
    <MudForm @bind-IsValid="@isFormValid" @bind-Errors="@formErrors">
        <MudSelect T="string" Label="Connector" Placeholder="Please select a connector..." Required="true" @bind-Value="model.ConnectorId" AdornmentIcon="@Icons.Material.Filled.Power" Variant="Variant.Outlined">
            @if (connectorDefinitionHeaders != null)
            {
                foreach (var header in connectorDefinitionHeaders)
                {
                    <MudSelectItem Value="@header.Id.ToString()">@header.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <MudTextField T="string" Label="Name" Required="true" RequiredError="A name is required" @bind-Value="model.Name" Variant="Variant.Outlined" />
        <MudTextField T="string" Label="Description" Required="false" @bind-Value="model.Description" Lines="5" Variant="Variant.Outlined" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isFormValid)" Class="mt-5" OnClick="HandleValidSubmit">Create Connected System</MudButton>
    </MudForm>
</MudPaper>

@code {
    private IList<ConnectorDefinitionHeader>? connectorDefinitionHeaders;
    private ConnectedSystemCreateViewModel model = new ConnectedSystemCreateViewModel();

    private bool isFormValid;
    private string[] formErrors = { };

    protected override async Task OnInitializedAsync()
    {
        connectorDefinitionHeaders = await Jim.ConnectedSystems.GetConnectorDefinitionHeadersAsync();
    }

    private async Task HandleValidSubmit()
    {
        var connectedSystem = new JIM.Models.Staging.ConnectedSystem
        {
            Name = model.Name,
            Description = model.Description,
            ConnectorDefinition = await Jim.ConnectedSystems.GetConnectorDefinitionAsync(int.Parse(model.ConnectorId))
        };

        await Jim.ConnectedSystems.CreateConnectedSystemAsync(connectedSystem);
        NavManager.NavigateTo($"/admin/connected-systems/{connectedSystem.Id}/{Utilities.ConvertToUrlParam(connectedSystem.Name)}");
    }
}