@page "/admin/connected-systems/sync-rules"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Logic;
@using JIM.Models.Logic.DTOs
@inject JimApplication Jim

<PageTitle>Synchronisation Rules</PageTitle>
<MudText Typo="Typo.h4">Synchronisation Rules</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
    Synchronisation Rules are used to define the flow of information between JIM and connected systems.
</MudText>

<MudPaper Elevation="0" Class="mt-2" Outlined="true">
    <MudToolBar>
        <MudButton Href="/admin/connected-systems/sync-rules" Color="Color.Primary" DropShadow="false" Disabled="true">Synchronisation Rules</MudButton>
        <MudSpacer />
        <MudButton 
            StartIcon="@Icons.Material.Filled.Add" 
            Variant="Variant.Filled" 
            Href="/admin/connected-systems/sync-rules/new" 
            Color="Color.Primary"
            Disabled="@(!_canCreateSyncRules)"
            DropShadow="false">Create Synchronisation Rule</MudButton>
    </MudToolBar>
</MudPaper>

@if (!_canCreateSyncRules)
{
    <MudAlert Class="mt-5" Severity="Severity.Warning">Please create a <MudLink Href="/admin/connected-systems/">Connected System</MudLink> first.</MudAlert>
}

<MudTable Items="@_syncRuleHeaders" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Filter="new Func<SyncRuleHeader,bool>(FilterFunc1)" Outlined="true" Elevation="0">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.Direction)">Direction</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.ConnectedSystemName)">Connected System</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.MetaverseObjectTypeName)">Metaverse Object Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.ConnectedSystemObjectTypeName)">Connected System Object Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.ProvisionToConnectedSystem!)">Provision?</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.ProjectToMetaverse!)">Project?</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SyncRuleHeader, object>(x => x.Enabled)">Status</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@("/admin/connected-systems/sync-rules/"+context.Id)">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Direction">
            @if (context.Direction == SyncRuleDirection.Import)
            {
                <MudChip T="string" Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft">Inbound</MudChip>
            }
            else
            {
                <MudChip T="string" Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight">Outbound</MudChip>
            }
        </MudTd>
        <MudTd DataLabel="Connected System">@context.ConnectedSystemName</MudTd>
        <MudTd DataLabel="Metaverse Object Type">@context.MetaverseObjectTypeName</MudTd>
        <MudTd DataLabel="Connected System Object Type">@context.ConnectedSystemObjectTypeName</MudTd>
        <MudTd DataLabel="Provision?">
            @if (context.Direction == SyncRuleDirection.Export)
            {
                @(context.ProvisionToConnectedSystem.HasValue && context.ProvisionToConnectedSystem.Value ? "Yes" : "No")
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Project?">
            @if (context.Direction == SyncRuleDirection.Import)
            {
                @(context.ProjectToMetaverse.HasValue && context.ProjectToMetaverse.Value ? "Yes" : "No")
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Status">
            @if (context.Enabled)
            {
                <MudChip T="string" Color="Color.Success">Enabled</MudChip>
            }
            else
            {
                <MudChip T="string" Color="Color.Default">Disabled</MudChip>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        There are no synchronisation rules
    </NoRecordsContent>
</MudTable>

@code {
    private IList<SyncRuleHeader>? _syncRuleHeaders;
    private string _searchString = "";
    private bool _canCreateSyncRules;

    private readonly List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Synchronisation Rules", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        _canCreateSyncRules = Jim.ConnectedSystems.GetConnectedSystemCount() > 0;
        _syncRuleHeaders = await Jim.ConnectedSystems.GetSyncRuleHeadersAsync();
    }

    private bool FilterFunc1(SyncRuleHeader element) => FilterFunc(element, _searchString);

    private static bool FilterFunc(SyncRuleHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}