version: '3.4'

services:

  tim.api:
    container_name: TIM.Api
    image: ${DOCKER_REGISTRY-}tim.api
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/tim
     - ENABLE_REQUEST_LOGGING=true
     - DB_HOSTNAME=tim.database
     - DB_NAME=tim_db
     - DB_USERNAME=tim
     - DB_PASSWORD=password
     - SSO_AUTHORITY=1
     - SSO_CLIENT_ID=2
     - SSO_SECRET=3
     - SSO_NAMEID_ATTRIBUTE=EmployeeID
     - SSO_INITIAL_ADMIN_NAMEID=1
    volumes:
      - logsvolume:/var/log/tim
    build:
      context: .
      dockerfile: src/TIM.Api/Dockerfile
    depends_on:
      - TIM.Database
    networks:
      - tim-network

  tim.service:
    container_name: TIM.Service
    image: ${DOCKER_REGISTRY-}tim.service
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/tim
     - DB_HOSTNAME=tim.database
     - DB_NAME=x
     - DB_USERNAME=y
     - DB_PASSWORD=z
    volumes:
      - logsvolume:/var/log/tim
    build:
      context: .
      dockerfile: src/TIM.Service/Dockerfile
    depends_on:
      - TIM.Database
    networks:
      - tim-network

  tim.scheduler:
    container_name: TIM.Scheduler
    image: ${DOCKER_REGISTRY-}tim.scheduler
    restart: always
    environment:
     - LOGGING_LEVEL=Verbose
     - LOGGING_PATH=/var/log/tim
     - DB_HOSTNAME=x
     - DB_NAME=tim_db
     - DB_USERNAME=y
     - DB_PASSWORD=z
    volumes:
      - logsvolume:/var/log/tim
    build:
      context: .
      dockerfile: src/TIM.Scheduler/Dockerfile
    depends_on:
      - TIM.Database
    networks:
      - tim-network
  
  adminer:
    container_name: TIM.Adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - TIM.Database
    networks:
      - tim-network

  tim.database:
    container_name: TIM.Database
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=tim
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=tim_db
    networks: 
      - tim-network

networks:
  tim-network:
    driver: bridge

volumes:
  logsvolume: {}