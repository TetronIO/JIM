@page "/t/{TypeNameUrlParam}"
@page "/t/{TypeNameUrlParam}/s/{PredefinedSearchUri}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Search
@using JIM.Models.Utility
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>@PageTitle</PageTitle>
<MudText Typo="Typo.h4" Class="mt-5">@PageTitle</MudText>
<MudText Typo="Typo.subtitle1">Search, or browse for @ObjectTypeName</MudText>

@if (PredefinedSearch != null)
{
    <MetaverseObjectHeaderPaginator Results="@MetaverseObjectHeaders" />
    
    <MudSimpleTable Style="overflow-x: auto;" Hover="true" Bordered="false" Striped="false" Class="mt-5" Outlined="true" Elevation="0">
        <thead>
            <tr>
                @foreach (PredefinedSearchAttribute psa in PredefinedSearch.Attributes)
                {
                    <th>@psa.MetaverseAttribute.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (MetaverseObjectHeaders != null && MetaverseObjectHeaders.Results.Count > 0)
            {
                foreach (var mo in MetaverseObjectHeaders.Results)
                {
                    <tr>
                        <td><MudLink Href="@("/t/"+MetaverseObjectType?.Name.ToLower()+"/v/"+mo.Id)">@mo.GetAttributeValue(Constants.BuiltInAttributes.DisplayName)?.StringValue</MudLink></td>
                        @foreach (var psa in PredefinedSearch.Attributes.Where(q => q.MetaverseAttribute.Name != Constants.BuiltInAttributes.DisplayName))
                        {
                            <td>@mo.GetAttributeValue(psa.MetaverseAttribute.Name)?.StringValue</td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@PredefinedSearch.Attributes.Count" class="light text-center">No results</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
    
    <div class="mt-5">
        <MetaverseObjectHeaderPaginator Results="@MetaverseObjectHeaders" />
    </div>
}
else
{
    if (!string.IsNullOrEmpty(PredefinedSearchUri))
    {
        <b>No such predefined search found, sorry</b>
    }
    else
    {
    <b>Please create a default Predefined Search for this Metaverse Object Type</b>    
    }
}

@code {
    [Parameter]
    public string TypeNameUrlParam { get; set; }

    [Parameter]
    public string? PredefinedSearchUri { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    private PagedResultSet<MetaverseObjectHeader>? MetaverseObjectHeaders { get; set; }
    private MetaverseObjectType? MetaverseObjectType { get; set; }
    private PredefinedSearch? PredefinedSearch { get; set; }
    private string? PageTitle { get; set; }
    private string? ObjectTypeName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Page == null || Page < 1)
            Page = 1;

        var typeName = Utilities.ConvertFromUrlParam(TypeNameUrlParam);
        MetaverseObjectType = await Jim.Metaverse.GetMetaverseObjectTypeAsync(typeName, false);
        if (MetaverseObjectType == null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        // set a default name for the objects on this page
        PageTitle = MetaverseObjectType.Name;

        // are we being asked to load a specific PredefinedSearch, via the URL?
        if (!string.IsNullOrEmpty(PredefinedSearchUri))
        {
            PredefinedSearch = await Jim.Search.GetPredefinedSearchAsync(PredefinedSearchUri);
        }
        else
        {
            // is there a default predefined search for this object type?
            PredefinedSearch = await Jim.Search.GetPredefinedSearchAsync(MetaverseObjectType);
        }

        if (PredefinedSearch != null)
        {
            // get a page of results for the metaverse objects matching this type...
            MetaverseObjectHeaders = await Jim.Metaverse.GetMetaverseObjectsOfTypeAsync(PredefinedSearch, Page.Value, 20, 500);
            PageTitle = PredefinedSearch.Name;
            ObjectTypeName = PredefinedSearch.Name.ToLower();
        }
    }
}