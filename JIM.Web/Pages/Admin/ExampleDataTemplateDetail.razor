@page "/admin/example-data/templates/{Id:int}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.DataGeneration
@using JIM.Models.Core
@using JIM.Models.Tasking
@using System.Diagnostics
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Data Generation Template: @_template?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Data Generation Template:</span> @_template?.Name</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@if (_template != null)
{
    foreach (var objectType in _template.ObjectTypes)
    {
        <MudTable Items="@objectType.TemplateAttributes" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Outlined="true" Elevation="0">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@objectType.MetaverseObjectType.Name</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateAttribute, object>(x => x.MetaverseAttribute!.Name)">Attribute</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateAttribute, object>(x => x.MetaverseAttribute!.Type)">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateAttribute, object>(x => x.PopulatedValuesPercentage!)">Population %</MudTableSortLabel></MudTh>
                <MudTh>Rules</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Attribute">@context.MetaverseAttribute?.Name</MudTd>
                <MudTd DataLabel="Type">@context.MetaverseAttribute?.Type</MudTd>
                <MudTd DataLabel="Population &">@context.PopulatedValuesPercentage</MudTd>
                <MudTd DataLabel="Rules">
                    @if (context.MetaverseAttribute?.Type == AttributeDataType.Text)
                    {
                        if (!string.IsNullOrEmpty(context.Pattern))
                        {
                            <MudChip Color="Color.Primary"><b>Pattern:</b>&nbsp;@context.Pattern</MudChip>
                        }

                        if (context.ExampleDataSetInstances is { Count: > 0 })
                        {
                            var setValues = context.ExampleDataSetInstances.Aggregate("", (current, set) => current + set.ExampleDataSet.Name + ", ");
                            if (setValues.EndsWith(", "))
                            {
                                setValues = setValues.Substring(0, setValues.Length - 2);
                            }

                            <MudChip Color="Color.Primary"><b>Data set(s):</b>&nbsp;@setValues</MudChip>
                        }

                        if (context.MinNumber.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Min:</b>&nbsp;@context.MinNumber.Value.ToString("N0")</MudChip>
                        }

                        if (context.MaxNumber.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Max:</b>&nbsp;@context.MaxNumber.Value.ToString("N0")</MudChip>
                        }

                        var weightedStringValues = "";
                        if (context.WeightedStringValues != null && context.WeightedStringValues.Count > 0)
                        {
                            weightedStringValues = context.WeightedStringValues.Aggregate(weightedStringValues, (current, wsv) => current + $"{wsv.Value}: {wsv.Weight}, ");
                            weightedStringValues = weightedStringValues.Substring(0, weightedStringValues.Length - 2);
                            <MudChip Color="Color.Primary"><b>Weighted Values:</b>&nbsp;@weightedStringValues</MudChip>
                        }
                    }
                    else if (context.MetaverseAttribute?.Type == AttributeDataType.Number)
                    {
                        if (context.MinNumber.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Min:</b>&nbsp;@context.MinNumber.Value.ToString("N0")</MudChip>
                        }

                        if (context.MaxNumber.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Max:</b>&nbsp;@context.MaxNumber.Value.ToString("N0")</MudChip>
                        }

                        if (context.SequentialNumbers.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Sequential:</b>&nbsp;@context.SequentialNumbers.Value.ToString()</MudChip>
                        }

                        if (context.RandomNumbers.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Random numbers:</b>&nbsp;@context.RandomNumbers.Value.ToString()</MudChip>
                        }
                    }
                    else if (context.MetaverseAttribute?.Type == AttributeDataType.Boolean)
                    {
                        if (context.BoolShouldBeRandom.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Random:</b>&nbsp;@context.BoolShouldBeRandom.Value.ToString()</MudChip>
                        }

                        if (context.BoolTrueDistribution.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>True distribution:</b>&nbsp;@context.BoolTrueDistribution.Value.ToString("N0")</MudChip>
                        }
                    }
                    else if (context.MetaverseAttribute?.Type == AttributeDataType.DateTime && (context.MinDate.HasValue || context.MaxDate.HasValue))
                    {
                        if (context.MinDate.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Min:</b>&nbsp;@context.MinDate.Value.ToShortDateString()</MudChip>
                        }

                        if (context.MaxDate.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Min:</b>&nbsp;@context.MaxDate.Value.ToShortDateString()</MudChip>
                        }
                    }
                    else if (context.MetaverseAttribute?.Type == AttributeDataType.Reference)
                    {
                        if (context.MvaRefMinAssignments.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>MVA min assignments:</b>&nbsp;@context.MvaRefMinAssignments.Value.ToString("N0")</MudChip>
                        }

                        if (context.MvaRefMaxAssignments.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>MVA max assignments:</b>&nbsp;@context.MvaRefMaxAssignments.Value.ToString("N0")</MudChip>
                        }

                        if (context.ReferenceMetaverseObjectTypes is { Count: > 0 })
                        {
                            var refTypes = context.ReferenceMetaverseObjectTypes.Aggregate("", (current, refType) => current + (refType.Name + ", "));
                            if (refTypes.EndsWith(", "))
                                refTypes = refTypes.Substring(0, refTypes.Length - 2);

                            <MudChip Color="Color.Primary"><b>Reference type(s):</b>&nbsp;@refTypes</MudChip>
                        }

                        if (context.ManagerDepthPercentage.HasValue)
                        {
                            <MudChip Color="Color.Primary"><b>Manager depth:</b>&nbsp;@(context.ManagerDepthPercentage + "%")</MudChip>
                        }
                    }
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                No template attributes
            </NoRecordsContent>
        </MudTable>
    }
}

<MudAlert Severity="Severity.Warning">
    <MudText Typo="Typo.h6">Warning</MudText>
    <MudText>
        Executing this template will cause example data to be inserted into the Metaverse. It's not recommended to do this on a system with Connectors and that is already initialised.
        This feature is primarily designed to enable demo or proof of concept work. There is no easy way to undo this once performed.
    </MudText>
    <MudButton Class="mt-5"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.BuildCircle"
               Color="Color.Warning"
               Disabled="@(_status != null)"
               OnClick="ExecuteTemplateAsync"
               DisableElevation="true">
        @if (_status is WorkerTaskStatus.Processing)
        {
            <text>Processing...</text>
        }
        else if (_status is WorkerTaskStatus.Queued)
        {
            <text>Queued...</text>
        }
        else
        {
            <text>Execute Template</text>
        }
    </MudButton>
</MudAlert>

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    private DataGenerationTemplate? _template;
    private DataGenerationTemplateWorkerTask? _task;
    private WorkerTaskStatus? _status;
    private List<BreadcrumbItem> _breadcrumbs = null!;

    protected override async Task OnInitializedAsync()
    {
        _template = await Jim.DataGeneration.GetTemplateAsync(Id);
        if (_template == null)
        {
            // template not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Example Data", href: "/admin/example-data/"),
            new(_template.Name, href: null, disabled: true)
        };

        // has this template already been scheduled, or is already being processed on the service queue?
        // continuously update the UI to show any change in status
        // POLLING_TO_REPLACE - tagging this functionality for replacement with an event-based ui update approach in the future
        new Timer(async _ =>
        {
            Debug.WriteLine("Timer loop executing...");
            if (_template != null)
            {
                _status = await Jim.Tasking.GetFirstDataGenerationTemplateWorkerTaskStatus(_template.Id);
                if (_status != null)
                    Debug.WriteLine("TimerLoop: status is " + _status);
                else
                    Debug.WriteLine("TimerLoop: status is null");
            }
            else
            {
                Debug.WriteLine("TimerLoop: template is null");
            }

            await InvokeAsync(StateHasChanged);
        }, null, 2000, 2000);
    }

    private async Task ExecuteTemplateAsync()
    {
        if (_template == null)
            return;

        // attribute the execution to the user
        var user = await Helpers.GetUserAsync(Jim, AuthenticationStateTask);
        _task = new DataGenerationTemplateWorkerTask(_template.Id, user);
        await Jim.Tasking.CreateWorkerTaskAsync(_task);
    }
}