@page "/admin/connected-systems/{Id:int}/{Name}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Connected System: @connectedSystem?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-text-secondary">Connected System:</span> @connectedSystem?.Name</MudText>
<MudText Typo="Typo.subtitle1">Some aspects of a Connected System can only be configured once basic details and setting values have been provided.</MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-5" Class="mt-5">
    <MudTabPanel Text="Details">
        <MudText>Details content...</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Settings">
        <MudText>Settings Content...</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Schema" Disabled="@AreSettingDependentTabsDisabled()">
        <MudText>Schema Content...</MudText>
    </MudTabPanel>
    @if (connectedSystem != null && connectedSystem.ConnectorDefinition.SupportsPartitions)
    {
        <MudTabPanel Text="Partitions & Containers" Disabled="@AreSettingDependentTabsDisabled()">
            <MudText>Contents &amp; Partitions Content...</MudText>
        </MudTabPanel>
    }
</MudTabs>


<div class="box-no-top mb-3">

    @if (connectedSystem != null && settingCategories != null)
    {
        if (activeTab == Tabs.Details)
        {
            <EditForm Model="@connectedSystem" OnValidSubmit="async () => await HandleValidDetailsSubmitAsync()">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="inputConnector" class="form-label">Connector</label>
                    <InputText class="form-control" id="inputConnector" @bind-Value="connectedSystem.ConnectorDefinition.Name" disabled />
                </div>
                <div class="mb-3">
                    <label for="inputName" class="form-label">Name</label>
                    <InputText class="form-control" id="inputName" @bind-Value="connectedSystem.Name" DisplayName="Name" />
                </div>
                <div class="mb-3">
                    <label for="textAreaDescription" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="textAreaDescription" rows="3" @bind-Value="connectedSystem.Description" />
                </div>
                <MudButton Color="Color.Primary">Save Changes</MudButton>
            </EditForm>
        }
        else if (activeTab == Tabs.Settings)
        {
            <p>Configure the connector for your environment by supplying values for the settings below.</p>

            <EditForm Model="@connectedSystem" OnValidSubmit="async () => await HandleValidSettingsSubmitAsync()">
                <JimValidator @ref="connectedSystemSettingsValidator" />

                <div class="accordion mb-3">
                    @for (var i = 0; i < settingCategories.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="panelsStayOpen-heading@(i)">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="true" aria-controls="panelsStayOpen-collapse@(i)">
                                    @settingCategories[i]
                                </button>
                            </h2>
                            <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-heading@(i)">
                                <div class="accordion-body">

                                    @foreach (var settingValue in connectedSystem.SettingValues.Where(sv => sv.Setting.Category == @settingCategories[i]))
                                    {
                                        var formElementName = $"setting-el-{i}";
                                        @if (settingValue.Setting.Type == ConnectedSystemSettingType.Heading)
                                        {
                                            <strong>@settingValue.Setting.Name</strong>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Divider)
                                        {
                                            <hr />
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.String)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringValue" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.StringEncrypted)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringEncryptedValue" type="password" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Integer)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <MudNumericField @bind-Value="@settingValue.IntValue" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.CheckBox)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <MudSwitch @bind-Checked="settingValue.CheckboxValue" id="@formElementName" Label="@settingValue.Setting.Name" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.DropDown && settingValue.Setting.DropDownValues != null)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">@settingValue.Setting.Name:</label>
                                                <div class="col-sm-10">
                                                    <MudSelect @bind-Value="settingValue.StringValue" id="@formElementName">
                                                        @foreach (var dropDownValue in settingValue.Setting.DropDownValues)
                                                        {
                                                            <option value="@dropDownValue">@dropDownValue</option>
                                                        }
                                                    </MudSelect>
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Label)
                                        {
                                            <div class="mb-3">
                                                @settingValue.Setting.Description
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.File)
                                        {
                                            <p>Files not yet supported for settings.</p>
                                        }
                                        else
                                        {
                                            <p>Oops. Unknown setting type!</p>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    }
                </div>

                <p class="small text-secondary">
                    <strong class="text-danger"> *</strong> Required setting
                </p>

                <ValidationSummary />
                <MudButton Color="Color.Primary">Save Changes</MudButton>
            </EditForm>
        }
        else if (activeTab == Tabs.Schema)
        {
            <div class="mb-3">
                <p>
                    Select which object types and which attributes for them are managed by JIM here. To maximise performance, only select those that need managing.
                </p>
                <MudAlert Severity="(connectedSystem.ObjectTypes.Count > 0 ? Severity.Warning : Severity.Info)">
                    @if (connectedSystem.ObjectTypes.Count == 0)
                    {
                        <text>
                            Retrieve the schema from the connected system, to be able to select which object types and attributes you want to manage with JIM.
                        </text>
                    }
                    else
                    {
                        <text>
                            <strong>Refreshing the schema can result in data-loss</strong>. If object types or attributes are discovered to have been removed at the connected system, then this will result in all references to them being removed from within JIM,
                            i.e. synchronisation rules, attribute flow, attributes values and even entire objects will be deleted if object types are removed. Refresh with caution. Ensure the Connected System identity has the right
                            permissions needed to retrieve the schema, and consider a database backup before proceeeding.
                        </text>
                    }
                    <div class="mt-3">
                        <MudButton Color="(connectedSystem.ObjectTypes.Count == 0 ? Color.Primary : Color.Warning)" Size="Size.Small" Onclick="HandleImportSchemaAsync">
                            @if (connectedSystem.ObjectTypes.Count == 0)
                            {
                                <text>Retrieve Schema</text>
                            }
                            else
                            {
                                <text>Refresh Schema</text>
                            }
                        </MudButton>
                    </div>
                </MudAlert>
            </div>

            @if (connectedSystem.ObjectTypes.Count > 0)
            {
                <div class="accordion mb-3" id="ot-accordion">
                    @for (var i = 0; i < connectedSystem.ObjectTypes.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="ot-heading-@(i)">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#ot-collapse-@(i)" aria-expanded="true" aria-controls="ot-collapse-@(i)">
                                    @if (connectedSystem.ObjectTypes[i].Attributes.Any(q => q.Selected))
                                    {
                                        <span class="jim-cs-s-selected"><i class="bi bi-check2-circle"></i></span>
                                    }
                                    else
                                    {
                                        <span class="jim-cs-s-not-selected"></span>
                                    }
                                    @connectedSystem.ObjectTypes[i].Name
                                </button>
                            </h2>
                            <div id="ot-collapse-@(i)" class="accordion-collapse collapse" aria-labelledby="ot-heading-@(i)" data-bs-parent="#ot-accordion">
                                <div class="accordion-body">

                                    Select the @connectedSystem.ObjectTypes[i].Name attributes you want to manage.

                                    <div class="mt-3 mb-3">
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.SelectAll">Select All</MudButton>
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.ClearAll">Select None</MudButton>
                                    </div>

                                    Mud Grid alternative to come...

                                    @*<Grid
                                                TItem="ConnectedSystemAttribute"
                                                Data="connectedSystem.ObjectTypes[i].Attributes"
                                                AllowFiltering="true"
                                                Responsive="true"
                                                AllowSorting="true"
                                                class="table table-hover table-bordered table-striped">
                                            <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Selected?" Filterable="false" SortKeySelector="item => item.Selected">
                                                <Switch @bind-Value="context.Selected" />
                                            </GridColumn>
                                            <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Name" PropertyName="Name" SortKeySelector="item => item.Name">
                                                @context.Name
                                            </GridColumn>
                                            <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Class" PropertyName="ClassName" SortKeySelector="item => item.ClassName">
                                                @context.ClassName
                                            </GridColumn>
                                            <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Plurality" PropertyName="AttributePlurality" Filterable="false" SortKeySelector="item => item.AttributePlurality">
                                                @context.AttributePlurality
                                            </GridColumn>
                                            <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Description" PropertyName="Description" SortKeySelector="item => item.Description">
                                                @context.Description
                                            </GridColumn>
                                        </Grid>*@

                                </div>
                            </div>
                        </div>
                    }
                </div>

                <MudButton Color="Color.Primary" OnClick="HandleAttributeSelectionSubmitAsync">Save Changes</MudButton>
            }
            else
            {
                <div class="p-5 bg-light rounded-3">
                    <div class="container-fluid py-5 text-center text-secondary">
                        Schema not yet retrieved
                    </div>
                </div>
            }
        }
        else if (activeTab == Tabs.Hierarchy && connectedSystem != null)
        {
            <div class="mb-3">
                <p>
                    <text>Select which @partitionsAndHierarchiesText are to be managed by JIM here. To maximise performance, only select those that need managing.</text>
                </p>

                <MudAlert Severity="(connectedSystem.Partitions != null && connectedSystem.Partitions.Count > 0 ? Severity.Warning : Severity.Info)">
                    @if (connectedSystem.ObjectTypes.Count == 0)
                    {
                        <text>Retrieve the hierarchy @partitionAndHierarchyText hierarchy from the connected system, to be able to select which ones you want to manage with JIM.</text>
                    }
                    else
                    {
                        <text>
                            <strong>Refreshing the @partitionAndHierarchyText heirarchy can result in data-loss</strong>. If partitions and/or containers are removed, then this will result in all objects in them being deleted
                            from the Connected System, which depending on your configuration, could result in those objects being deprovisioned from the Metaverse and any downstream Connected Systems. Refresh with caution.
                            Ensure the Connected System identity has the right permissions needed to retrieve the heirarchy, and consider a database backup before proceeeding.
                        </text>
                    }
                    <div class="mt-3">
                        <MudButton Disabled="@hierarchyBeingRetrieved" Color="(connectedSystem.Partitions == null || connectedSystem.Partitions.Count == 0 ? Color.Primary : Color.Warning)" Size="Size.Small" Onclick="HandleImportHierarchyAsync">
                            @if (hierarchyBeingRetrieved)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                if (connectedSystem.Partitions?.Count == 0)
                                {
                                    <MudText>Retrieve Hierarchy</MudText>
                                }
                                else
                                {
                                    <MudText>Refresh Hierarchy</MudText>
                                }
                            }
                        </MudButton>
                    </div>
                </MudAlert>
            </div>

            @if (connectedSystem.Partitions != null && connectedSystem.Partitions.Count > 0)
            {
                <div class="accordion mb-3" id="p-accordion">
                    @for (var i = 0; i < connectedSystem.Partitions.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="p-heading-@(i)">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#p-collapse-@(i)" aria-expanded="true" aria-controls="ot-collapse-@(i)">
                                    @if (connectedSystem.Partitions[i].Selected)
                                    {
                                        <span class="jim-cs-s-selected"><i class="bi bi-check2-circle"></i></span>
                                    }
                                    else
                                    {
                                        <span class="jim-cs-s-not-selected"></span>
                                    }
                                    @connectedSystem.Partitions[i].Name
                                </button>
                            </h2>
                            <div id="p-collapse-@(i)" class="accordioncollapse collapse" aria-labelledby="p-heading-@(i)" data-bs-parent="#p-accordion">
                                <div class="accordion-body">

                                    Select the @connectedSystem.Partitions[i].Name containers you want to manage.

                                    <div class="mt-3 mb-3">
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.SelectAll">Select All</MudButton>
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.ClearAll">Select None</MudButton>
                                    </div>

                                    <!-- container heirarchy to go here -->

                                </div>
                            </div>
                        </div>
                    }
                </div>

                <MudButton Color="Color.Primary" Onclick="HandleHierarchySelectionSubmitAsync">Save Changes</MudButton>
            }
            else
            {
                <div class="p-5 bg-light rounded-3">
                    <div class="container-fluid py-5 text-center text-secondary">
                        Hierarchy not yet retrieved
                    </div>
                </div>
            }
        }
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private JIM.Models.Staging.ConnectedSystem? connectedSystem;
    private Tabs activeTab = Tabs.Details;
    private List<ConnectedSystemSettingCategory>? settingCategories;
    private JimValidator? connectedSystemSettingsValidator;
    private string? partitionsAndHierarchiesText;
    private string? partitionAndHierarchyText;
    private bool schemaBeingRetrieved;
    private bool hierarchyBeingRetrieved;

    // ui helper
    private enum Tabs
    {
        Details,
        Settings,
        Schema,
        Hierarchy
    }

    protected override async Task OnInitializedAsync()
    {
        connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(Id);
        if (connectedSystem == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        // get a list of the distinct setting categories in use, so we can render them in category blocks
        settingCategories = connectedSystem.SettingValues.Select(q => q.Setting.Category).Distinct().ToList();

        // to save us having to perform this comparison all over the view
        if (connectedSystem.ConnectorDefinition.SupportsPartitions && connectedSystem.ConnectorDefinition.SupportsPartitionContainers)
        {
            partitionsAndHierarchiesText = "partitions and containers";
            partitionAndHierarchyText = "partition and container";
        }
        else if (connectedSystem.ConnectorDefinition.SupportsPartitions)
        {
            partitionsAndHierarchiesText = "partitions";
            partitionAndHierarchyText = "partition";
        }
    }

    private bool AreSettingDependentTabsDisabled()
    {
        if (connectedSystem == null)
            return true;
        else if (connectedSystem.SettingValuesValid)
            return false;
        else
            return true;
    }

    private async Task HandleValidDetailsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidDetailsSubmitAsync)}: connectedSystem was null");
            return;
        }

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your details changes have been saved.", Severity.Success);
    }

    private async Task HandleValidSettingsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidSettingsSubmitAsync)}: connectedSystem was null");
            return;
        }

        // validate the form
        connectedSystemSettingsValidator?.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        var results = Jim.ConnectedSystems.ValidateConnectedSystemSettings(connectedSystem);
        for (var i = 0; i < results.Count; i++)
        {
            if (results[i].IsValid)
                continue;

            if (results[i].SettingValue != null && results[i].SettingValue.Setting != null && results[i].SettingValue.Setting.Name != null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add(results[i].SettingValue.Setting.Name, new() { results[i].ErrorMessage });
            else if (results[i].SettingValue == null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add($"General issue {i}", new() { results[i].ErrorMessage });
        }

        if (errors != null && errors.Any())
        {
            connectedSystemSettingsValidator?.DisplayErrors(errors);
            return;
        }

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your setting changes have been saved.", Severity.Success);
    }

    private async Task HandleImportSchemaAsync()
    {
        if (connectedSystem == null)
            return;

        schemaBeingRetrieved = true;
        await Jim.ConnectedSystems.ImportConnectedSystemSchemaAsync(connectedSystem);
        schemaBeingRetrieved = false;
    }

    private async Task HandleAttributeSelectionSubmitAsync()
    {
        if (connectedSystem == null)
            return;



        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your attribute changes have been saved.", Severity.Success);
    }

    private async Task HandleImportHierarchyAsync()
    {
        if (connectedSystem == null)
            return;

        hierarchyBeingRetrieved = true;
        await Jim.ConnectedSystems.ImportConnectedSystemHierarchyAsync(connectedSystem);
        hierarchyBeingRetrieved = false;
    }

    private async Task HandleHierarchySelectionSubmitAsync()
    {
        if (connectedSystem == null)
            return;

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        Snackbar.Add("Your hierarchy changes have been saved.", Severity.Success);
    }
}