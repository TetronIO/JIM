@page "/activity"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim

<PageTitle>Activity</PageTitle>
<MudText Typo="Typo.h4">Activity</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>

<MudText Typo="Typo.subtitle1" Class="mud-text-secondary mt-2 mb-2">
    See what JIM has been used for here. Everything that happens in JIM is tracked by an Activity. 
    Activities can be initiated by an individual, or by the system via automation in response to synchronisation schedules, workflows, etc.
</MudText>

@if (_activities != null)
{
    <ActivityItemPaginator Results="@_activities" />

    <MudTable T="Activity" Items="@_activities.Results" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" Class="mt-5" Outlined="true" Elevation="0">
        <HeaderContent>
            <MudTh><MudText Typo="Typo.button">Target</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Type</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Operation</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Created</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Initiated By</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Status</MudText></MudTh>
            <MudTh><MudText Typo="Typo.button">Execution Time</MudText></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Target">
                <MudLink Href="@($"/activity/{context.Id}")">@(!string.IsNullOrEmpty(context.TargetName) ? context.TargetName : "(no name)")</MudLink>
            </MudTd>
            <MudTd DataLabel="Type">@context.TargetType.ToString().SplitOnCapitalLetters()</MudTd>
            <MudTd DataLabel="Operation">@context.TargetOperationType.ToString().SplitOnCapitalLetters()</MudTd>
            <MudTd DataLabel="Created">@context.Created.ToFriendlyDate()</MudTd>
            <MudTd DataLabel="Initiated By">
                @if (context.InitiatedBy != null)
                {
                    <MudLink Href="@Utilities.GetMetaverseObjectHref(context.InitiatedBy)">@Utilities.GetMetaverseObjectHrefText(context.InitiatedBy)</MudLink>
                }
                else if (!string.IsNullOrEmpty(context.InitiatedByName))
                {
                    @context.InitiatedByName
                }
            </MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Variant="Variant.Text" Color="Helpers.GetActivityMudBlazorColorForStatus(context.Status)">@context.Status.ToString().SplitOnCapitalLetters()</MudChip>
            </MudTd>
            <MudTd DataLabel="Execution Time">@context.ExecutionTime</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            There is no activity to show yet.
        </NoRecordsContent>
    </MudTable>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }
    private PagedResultSet<Activity>? _activities;

    private readonly List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Activity", href: null, disabled: true),
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or < 1)
            Page = 1;

        _activities = await Jim.Activities.GetActivitiesAsync(Page.Value);
    }
}