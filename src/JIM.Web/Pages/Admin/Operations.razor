@page "/admin/operations"
@using JIM.Application;
@using JIM.Models.Staging;
@using JIM.Models.Staging.Dtos;
@using JIM.Models.Tasking;
@attribute [Authorize(Roles = "Administrators")]
@inject JimApplication Jim
@inject ISnackbar Snackbar
@implements IDisposable

<PageTitle>Operations</PageTitle>
<MudText Typo="Typo.h4">Operations</MudText>
<MudText Typo="Typo.subtitle1">
    JIM executes tasks on a queue. You can see what tasks are queued here. Tasks are made up of different types of operations within JIM, i.e. Synchronisation Tasks and Data Generation Tasks.
</MudText>

<MudPaper Outlined="true" Class="pa-4 mt-5">
    <MudText Typo="Typo.h6">Execute a Run Profile</MudText>
    <MudText>Add a Synchronisation Run to the queue. If it's empty, it'll run immediately, if not, it'll run when all other queued tasks are complete.</MudText>

    @if (connectedSystemHeaders != null && connectedSystemHeaders.Count > 0)
    {
        <MudForm>
            <MudSelect T="ConnectedSystemHeader" ValueChanged="HandleConnectedSystemHeaderChangedAsync" Label="Connected System" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="mt-5" Required="true" RequiredError="Please select a Connected System">
                @foreach (ConnectedSystemHeader connectedSystem in connectedSystemHeaders)
                {
                    <MudSelectItem Value="@connectedSystem" />
                }
            </MudSelect>
            @if (connectedSystemRunProfiles != null)
            {
                <MudSelect T="ConnectedSystemRunProfile" @bind-Value="selectedConnectedSystemRunProfile" Label="Run Profile" Variant="Variant.Outlined" Class="mt-5" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="A run profile is required">
                    @foreach (ConnectedSystemRunProfile runProfile in connectedSystemRunProfiles)
                    {
                        <MudSelectItem Value="@runProfile" />
                    }
                </MudSelect>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleExecuteRunProfileSubmitAsync" Class="mt-5" DisableElevation="true">Execute</MudButton>
        </MudForm>
    }
    else
    {
        <MudAlert Class="mt-5" Severity="Severity.Warning">Please create a <MudLink Href="/admin/connected-systems/">Connected System</MudLink> first.</MudAlert>
    }
</MudPaper>

<MudTable T="ServiceTask" Items="@serviceTasks" Virtualize="true" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" Class="mt-5" Outlined="true" Elevation="0">
    <HeaderContent>
        <MudTh>Action</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Created</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (context is DataGenerationTemplateServiceTask)
        {
            var dataGenTask = (DataGenerationTemplateServiceTask)context;
            var template = Jim.DataGeneration.GetTemplateHeaderAsync(dataGenTask.TemplateId).GetAwaiter().GetResult();
            if (template != null)
            {
                <MudTd>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem Icon="@Icons.Material.Filled.Cancel" IconSize="Size.Small" OnClick="((e) => HandleTaskDeleteAsync(context))">Cancel</MudMenuItem>
                    </MudMenu>
                </MudTd>
                <MudTd DataLabel="Type">Data Generation Template</MudTd>
                <MudTd DataLabel="Name">@template.Name</MudTd>
                <MudTd DataLabel="Status">@context.Status.ToString().SplitOnCapitalLetters()</MudTd>
                <MudTd DataLabel="Created">@context.Timestamp</MudTd>
            }
        }
        else
        {
            // sync task
            var syncTask = (SynchronisationServiceTask)context;
            var runProfileHeader = Jim.ConnectedSystems.GetConnectedSystemRunProfileHeaderAsync(syncTask.ConnectedSystemRunProfileId).GetAwaiter().GetResult();
            if (runProfileHeader != null)
            {
                <MudTd>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem Icon="@Icons.Material.Filled.Cancel" IconSize="Size.Small" OnClick="((e) => HandleTaskDeleteAsync(context))">Cancel</MudMenuItem>
                    </MudMenu>
                </MudTd>
                <MudTd DataLabel="Type">Synchronisation Task</MudTd>
                <MudTd DataLabel="Name">@runProfileHeader.ToString()</MudTd>
                <MudTd DataLabel="Status">@context.Status.ToString().SplitOnCapitalLetters()</MudTd>
                <MudTd DataLabel="Created">@context.Timestamp</MudTd>
            }
        }
    </RowTemplate>
    <NoRecordsContent>
        There are no service tasks queued.
    </NoRecordsContent>
</MudTable>

@code {
    private List<ConnectedSystemHeader>? connectedSystemHeaders;
    private List<ConnectedSystemRunProfile>? connectedSystemRunProfiles;
    private ConnectedSystemHeader? selectedConnectedSystemHeader;
    private ConnectedSystemRunProfile? selectedConnectedSystemRunProfile;
    private List<ServiceTask> serviceTasks = new List<ServiceTask>();
    private CancellationTokenSource pollingCancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        connectedSystemHeaders = await Jim.ConnectedSystems.GetConnectedSystemHeadersAsync();

        // get initial data for service task table rendering
        serviceTasks = await Jim.Tasking.GetServiceTasksAsync();

        // setup polling for service task updates
        var token = pollingCancellationTokenSource.Token;
        var listener = await Task.Factory.StartNew(async () =>
        {
            while (true)
            {
                var stateHasChanged = false;
                Console.WriteLine("Polling for service tasks...");
                var newServiceTasks = await Jim.Tasking.GetServiceTasksAsync();

                // look for additions or updates...
                foreach (var newServiceTask in newServiceTasks)
                {
                    var serviceTask = serviceTasks.SingleOrDefault(q => q.Id == newServiceTask.Id);
                    if (serviceTask == null)
                    {
                        // newServiceTask is new, add it
                        Console.WriteLine("ST-POLLING: Adding service task: " + newServiceTask.Id);
                        serviceTasks.Add(newServiceTask);
                        stateHasChanged = true;
                    }
                    else
                    {
                        // existing service task, so it's either unchanged, or an update
                        if (serviceTask.Status != newServiceTask.Status)
                        {
                            Console.WriteLine("ST-POLLING: Updating service task: " + newServiceTask.Id);
                            var position = serviceTasks.IndexOf(serviceTask);
                            serviceTasks.Remove(serviceTask);
                            serviceTasks.Insert(position, newServiceTask);                            
                            stateHasChanged = true;
                        }
                    }
                }

                // look for removals, i.e. serviceTasks items not in newServiceTasks
                var serviceTasksToRemove = serviceTasks.Where(p => newServiceTasks.All(p2 => p2.Id != p.Id));
                foreach (var serviceTaskToRemove in serviceTasksToRemove)
                {
                    Console.WriteLine("ST-POLLING: Removing service task: " + serviceTaskToRemove.Id);
                    serviceTasks.Remove(serviceTaskToRemove);
                    stateHasChanged = true;
                }

                if (stateHasChanged)
                    await InvokeAsync(StateHasChanged);

                Thread.Sleep(TimeSpan.FromSeconds(2));
                if (token.IsCancellationRequested)
                    break;
            }
        }, token);
    }

    void IDisposable.Dispose()
    {
        // make sure we cancel the polling task
        pollingCancellationTokenSource.Cancel();
    }

    private async Task HandleConnectedSystemHeaderChangedAsync(ConnectedSystemHeader connectedSystemHeader)
    {
        selectedConnectedSystemHeader = connectedSystemHeader;
        connectedSystemRunProfiles = await Jim.ConnectedSystems.GetConnectedSystemRunProfilesAsync(connectedSystemHeader.Id);
    }

    private async Task HandleExecuteRunProfileSubmitAsync()
    {
        if (selectedConnectedSystemHeader == null || selectedConnectedSystemRunProfile == null)
            return;

        var task = new SynchronisationServiceTask(selectedConnectedSystemHeader.Id, selectedConnectedSystemRunProfile.Id);
        await Jim.Tasking.CreateServiceTaskAsync(task);
        Snackbar.Add("Synchronisation task added.", Severity.Success);
    }

    private string GetServiceTaskType(ServiceTask serviceTask)
    {
        if (serviceTask is DataGenerationTemplateServiceTask)
            return "Data Generation Template Task";
        else if (serviceTask is SynchronisationServiceTask)
            return "Synchronisation Task";
        else
            return "Unknown Task";
    }

    private async Task HandleTaskDeleteAsync(ServiceTask serviceTask)
    {
        //if (connectedSystem == null || connectedSystem.RunProfiles == null)
        //    return;

        //connectedSystem.RunProfiles.Remove(connectedSystemRunProfile);
        //await Jim.ConnectedSystems.DeleteConnectedSystemRunProfileAsync(connectedSystemRunProfile);
        //Snackbar.Add("Run profile removed.", Severity.Success);
    }
}
