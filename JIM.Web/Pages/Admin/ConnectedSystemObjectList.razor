@page "/admin/connected-systems/{Id:int}/objects"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Staging;
@using JIM.Models.Staging.DTOs
@using JIM.Models.Tasking;
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Connected System Objects: @_connectedSystemHeader?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connected System Objects:</span> @_connectedSystemHeader?.Name</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
    A view of the objects that are staged within JIM for this connected system. This is where changes either, to the connected system are staged ahead of synchronisation, 
    or where changes from the system are staged before being committed to the Metaverse within JIM.
</MudText>

@if (_connectedSystemObjectHeaders != null)
{
    <MudGrid Class="mt-5">
        <MudItem xs="6">
            <MudMenu Label="Options" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Default" DropShadow="false">
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="@Icons.Material.Filled.Delete" OnClick="HandleDeleteAllObjectsClickAsync">Delete all objects</MudMenuItem>
            </MudMenu>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <ConnectedSystemObjectHeaderPaginator Results="@_connectedSystemObjectHeaders" />
        </MudItem>
    </MudGrid>    

    <MudTable Items="@_connectedSystemObjectHeaders.Results"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Class="mt-5 mb-5"
              SortLabel="Sort By"
              Filter="new Func<ConnectedSystemObjectHeader,bool>(FilterFunc1)"
              Outlined="true"
              Elevation="0">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.ExternalIdAttributeValue!)">External Id</MudTableSortLabel></MudTh>
            @* TODO: change this so a check is done on whether the connector supports secondary external ids or not so we don't have to do two linq queries *@
            @if (_connectedSystemObjectHeaders.Results.Any(q => q.SecondaryExternalIdAttributeValue != null))
            {
                <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.SecondaryExternalIdAttributeValue!)">Secondary External Id</MudTableSortLabel></MudTh>
            }
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.DisplayName!)">Display Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.TypeName)">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.Created)">Created</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.JoinType)">Join Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.DateJoined!)">Date Joined</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="External Id">
                <MudLink Href="@(Utilities.GetConnectedSystemObjectHref(context))">@context.ExternalIdAttributeValue</MudLink>
            </MudTd>
            @if (_connectedSystemObjectHeaders.Results.Any(q => q.SecondaryExternalIdAttributeValue != null))
            {
                <MudTd DataLabel="Secondary External Id">@context.SecondaryExternalIdAttributeValue</MudTd>
            }
            <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
            <MudTd DataLabel="Type">@context.TypeName</MudTd>
            <MudTd DataLabel="Created">@context.Created</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="Join Type">@context.JoinType.ToString().SplitOnCapitalLetters()</MudTd>
            <MudTd DataLabel="Date Joined">@(context.DateJoined != null ? context.DateJoined : "-")</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            There are no objects for this connected system. Have you performed a full import?
        </NoRecordsContent>
    </MudTable>

    <MudMessageBox @ref="DeleteAllObjectsMessageBox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Deleting the connected system objects does not cause objects to be deleted in the external system. 
            It just removes the objects from JIM. A full-import on this connect system and full-synchrnisation on all connected system is needed to rebuild the correct state.
            <br/><br/>
            The deletes will be executed via a task and may take some time. Check the <MudLink Href="/admin/operations" Target="_blank">Operations</MudLink> page or refresh this one to see progress.
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" DropShadow="false" StartIcon="@Icons.Material.Filled.DeleteForever" Class="ml-2">Delete all objects</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private MudMessageBox? DeleteAllObjectsMessageBox { get; set; }
    private ConnectedSystemHeader? _connectedSystemHeader;
    private PagedResultSet<ConnectedSystemObjectHeader>? _connectedSystemObjectHeaders;
    private string _searchString = "";
    private List<BreadcrumbItem> _breadcrumbs = null!;

    protected override async Task OnParametersSetAsync()
    {
        // why does this view get executed when the web app launches when debugging?
        _connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(Id);
        if (_connectedSystemHeader == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("Home", href: "/", icon: Icons.Material.Filled.Home),
            new("Connected Systems", href: "/admin/connected-systems/"),
            new(_connectedSystemHeader.Name, href: Utilities.GetConnectedSystemHref(_connectedSystemHeader)),
            new("Objects", href: null, disabled: true)
        };

        if (Page is null or < 1)
            Page = 1;

        _connectedSystemObjectHeaders = await Jim.ConnectedSystems.GetConnectedSystemObjectHeadersAsync(Id, (int)Page);
    }

    private bool FilterFunc1(ConnectedSystemObjectHeader element) => FilterFunc(element, _searchString);

    private static bool FilterFunc(ConnectedSystemObjectHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (!string.IsNullOrEmpty(element.DisplayName) && element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task HandleDeleteAllObjectsClickAsync()
    {
        if (DeleteAllObjectsMessageBox == null)
            return;

        var userPromptResult = await DeleteAllObjectsMessageBox.ShowAsync();
        if (!userPromptResult.HasValue || !userPromptResult.Value) 
            return;
        
        // attribute the execution to the user
        var user = await Helpers.GetUserAsync(Jim, AuthenticationStateTask);
        var task = new ClearConnectedSystemObjectsWorkerTask(Id, user);
        await Jim.Tasking.CreateWorkerTaskAsync(task);
        Snackbar.Add("Connected system objects queued for deletion.", Severity.Info);
    }
}