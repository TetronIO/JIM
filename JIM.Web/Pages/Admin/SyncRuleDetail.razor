@page "/admin/connected-systems/sync-rules/new"
@page "/admin/connected-systems/sync-rules/{Id:int}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Logic
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Synchronisation Rule: @syncRuleNameOrCreate</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Synchronisation Rule:</span> @syncRuleNameOrCreate</MudText>
<MudBreadcrumbs Items="breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@if (syncRule != null)
{
    <MudPaper Class="pa-4 mt-5" Outlined="true">
        <MudForm @bind-IsValid="@isDetailsFormValid" @bind-Errors="@detailsFormErrors">
            <MudTextField Label="Name" Required="true" RequiredError="A name is required" @bind-Value="syncRule.Name" Variant="Variant.Outlined" />

            @if (syncRule.Id == 0)
            {
                @if (connectedSystemHeaders != null)
                {
                    <MudSelect 
                        T="string"
                        Label="Connected System"
                        Placeholder="Please select a Connected System..."
                        Required="true"
                        ValueChanged="HandleConnectedSystemSelectedAsync"
                        AdornmentIcon="@Icons.Material.Filled.Power"
                        Adornment="Adornment.Start"
                        Variant="Variant.Outlined"
                        Class="mt-5">
                        @foreach (var header in connectedSystemHeaders)
                        {
                            <MudSelectItem Value="@header.Id.ToString()">@header.Name</MudSelectItem>
                        }
                    </MudSelect>
                }

                <MudSelect T="string"
                           Label="Direction"
                           Placeholder="Please select an attribute flow direction..."
                           Required="true"
                           ValueChanged="HandleSyncRuleDirectionSelection"
                           Variant="Variant.Outlined"
                           Class="mt-5">
                    @foreach (SyncRuleDirection item in Enum.GetValues(typeof(SyncRuleDirection)))
                    {
                        if (item != SyncRuleDirection.NotSet)
                        {
                            <MudSelectItem Value="@item.ToString()">@item</MudSelectItem>
                        }
                    }
                </MudSelect>

                @if (syncRule.ConnectedSystem != null && syncRule.Direction != SyncRuleDirection.NotSet && metaverseObjectTypes != null && syncRule.ConnectedSystem != null && syncRule.ConnectedSystem.ObjectTypes != null)
                {
                    <MudGrid>
                        <MudItem xs="5">
                            <MudSelect T="MetaverseObjectType"
                                       Label="Metaverse Object Type"
                                       @bind-Value="@syncRule.MetaverseObjectType"
                                       Required="true"
                                       Class="mt-5"
                                       Variant="Variant.Outlined">
                                @foreach (var mvObjectType in metaverseObjectTypes)
                                {
                                    <MudSelectItem Value="@mvObjectType">@mvObjectType.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="2">
                            <MudPaper Outlined="false" Elevation="0" Class="d-flex flex-column align-center justify-center mud-width-full py-10">
                                <MudIcon Size="Size.Medium" Icon="@(syncRule.Direction == SyncRuleDirection.Export ? Icons.Material.Filled.KeyboardDoubleArrowRight : Icons.Material.Filled.KeyboardDoubleArrowLeft)"></MudIcon>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="5">
                            <MudSelect T="ConnectedSystemObjectType"
                                       Label="Connected System Object Type"
                                       @bind-Value="@syncRule.ConnectedSystemObjectType"
                                       Required="true"
                                       Class="mt-5"
                                       Variant="Variant.Outlined">
                                @foreach (var csObjectType in syncRule.ConnectedSystem.ObjectTypes.Where(ot => ot.Selected))
                                {
                                    <MudSelectItem Value="@csObjectType">@csObjectType.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                }

                @if (syncRule.Direction == SyncRuleDirection.Import)
                {
                    <MudSwitch @bind-Value="@syncRule.ProjectToMetaverse" Color="Color.Primary" Label="Create imported objects in the Metaverse?" />
                    <MudAlert Class="mt-5" Severity="Severity.Normal" Variant="Variant.Text">By default, objects imported from this Connected System matched in this synchronisation rule will not result in a Metaverse object being created. Enabling this option causes the object to be projected to the Metaverse, allowing it to be managed within JIM and synchronised to other Connected Systems. You would typically enable this for a source system, i.e. a HR system.</MudAlert>
                }
                @if (syncRule.Direction == SyncRuleDirection.Export)
                {
                    <MudSwitch @bind-Value="@syncRule.ProvisionToConnectedSystem" Color="Color.Primary" Label="Create objects in the Connected System?" />
                    <MudAlert Class="mt-5" Severity="Severity.Normal" Variant="Variant.Text">By default, Metaverse objects matched in this synchronisation rule will not be created (provisioned) in the Connected Systems. Enabling this option will cause the Metaverse object to be created (provisioned) in the Connected System. You would typically enable this option for a destination system, i.e. when trying to implement a HR to Active Directory flow.</MudAlert>
                }

                <MudSwitch Class="mt-5" @bind-Value="@syncRule.Enabled" Color="Color.Primary" Label="Enabled?" />
                <MudAlert Class="mt-5" Severity="Severity.Normal" Variant="Variant.Text">Synchronisation Rules will not be evaluated when disabled, enabling you to either prepare a rule in advance of it needing to be used, or to temporarily stop evaluating the sync rule..</MudAlert>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isDetailsFormValid)" Class="mt-5" OnClick="HandleValidDetailsFormSubmit" DisableElevation="true">Save Synchronisation Rule</MudButton>
            }
            
        </MudForm>
    </MudPaper>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private string syncRuleNameOrCreate = "New";
    private List<BreadcrumbItem> breadcrumbs = null!;
    private SyncRule? syncRule;
    private bool isDetailsFormValid;
    private string[] detailsFormErrors = { };
    private List<ConnectedSystemHeader> connectedSystemHeaders = null!;
    private List<MetaverseObjectType> metaverseObjectTypes = null!;
    private List<ConnectedSystemObjectType> connectedSystemObjectTypes = null!;

    protected override async Task OnInitializedAsync()
    {
        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Synchronisation Rules", href: "/admin/connected-systems/sync-rules/")
        };

        if (Id != null)
        {
            // edit an existing sync rule
            syncRule = await Jim.ConnectedSystems.GetSyncRuleAsync(Id.Value);
            if (syncRule == null)
            {
                // sync rule not found, redirect to index page
                NavManager.NavigateTo("../");
                return;
            }

            breadcrumbs.Add(new BreadcrumbItem(syncRule.Name, href: null, disabled: true));
        }
        else
        {
            // create a new sync rule
            syncRule = new SyncRule();
            breadcrumbs.Add(new BreadcrumbItem("New", href: null, disabled: true));
            connectedSystemHeaders = await Jim.ConnectedSystems.GetConnectedSystemHeadersAsync();
            metaverseObjectTypes = await Jim.Metaverse.GetMetaverseObjectTypesAsync(false);
        }
    }

    private async Task HandleConnectedSystemSelectedAsync(string connectedSystemId)
    {
        // should never happen, but performing for linting reasons
        if (syncRule == null)
            return;

        // convert to int and assign to SR
        int connectedSystemIdInt = int.Parse(connectedSystemId);
        var connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(connectedSystemIdInt);
        if (connectedSystem == null)
            return;

        syncRule.ConnectedSystem = connectedSystem;
        Console.WriteLine($"HandleConnectedSystemSelectedAsync: Assigned ConnectedSystem: {syncRule.ConnectedSystem}");
    }

    private void HandleSyncRuleDirectionSelection(string syncRuleDirection)
    {
        // convert to enum and assign to sr
        // should never happen, but performing for linting reasons
        if (syncRule == null)
            return;

        var syncRuleDirectionEnum = (SyncRuleDirection)Enum.Parse(typeof(SyncRuleDirection), syncRuleDirection);
        syncRule.Direction = syncRuleDirectionEnum;
        Console.WriteLine($"HandleSyncRuleDirectionSelection: Assigned SyncRuleDirection: {syncRule.Direction}");

        // reset provision/project choices
        syncRule.ProvisionToConnectedSystem = false;
        syncRule.ProjectToMetaverse = false;
    }

    private async Task HandleValidDetailsFormSubmit()
    {
        // var connectorDefinition = await Jim.ConnectedSystems.GetConnectorDefinitionAsync(int.Parse(model.ConnectorId));
        // if (connectorDefinition == null)
        //     return;

        // var connectedSystem = new JIM.Models.Staging.ConnectedSystem
        //     {
        //         Name = model.Name,
        //         Description = model.Description,
        //         ConnectorDefinition = connectorDefinition
        //     };

        // // attribute the execution to the user
        // var user = await Helpers.GetUserAsync(Jim, authenticationStateTask);
        // await Jim.ConnectedSystems.CreateConnectedSystemAsync(connectedSystem, user);
        // NavManager.NavigateTo($"/admin/connected-systems/{connectedSystem.Id}");
    }
}