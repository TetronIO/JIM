@page "/admin/example-data/templates/{Id:int}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.DataGeneration
@using JIM.Models.DataGeneration.Dto
@using JIM.Models.Core
@inject JimApplication Jim

<PageTitle>Data Generation Template: @template?.Name</PageTitle>
<h1><small class="text-muted">Data Generation Template:</small> @template?.Name</h1>

@if (template != null)
{
    foreach (var objectType in template.ObjectTypes)
    {
        <div class="box mt-3">
            <h3><small class="text-muted">Object Type:</small> @objectType.MetaverseObjectType.Name</h3>
            <p>Objects to be created: @objectType.ObjectsToCreate.ToString("N0")</p>

            <table class="table">
              <thead>
                <tr>
                  <th scope="col">Attribute</th>
                  <th scope="col">Type</th>
                  <th scope="col">Population %</th>
                  <th scope="col">Rule(s)</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var ta in objectType.TemplateAttributes)
                {
                    <tr>
                    <td>@ta.MetaverseAttribute?.Name</td>
                    <td>@ta.MetaverseAttribute?.Type</td>
                    <td>@ta.PopulatedValuesPercentage</td>
                    <td>@((MarkupString)SimplifyAttributeConstraints(ta))</td>
                    </tr>
                }
              </tbody>
            </table>
        </div>
    }    
}

<div class="alert alert-warning mt-3" role="alert">
  <h4 class="alert-heading"><i class="bi bi-exclamation-triangle"></i> Warning!</h4>
  <p>Executing this template will cause example data to be inserted into the Metaverse. It's not recommended to do this on a system with Connectors and that is already initialised. 
    This feature is primarily designed to enable demo or proof of concept work. There is no easy way to undo this once performed.</p>
  <hr>
  <button type="submit" class="btn btn-warning" @onclick="ExecuteTemplateAsync" disabled="@isTemplateBeingExecuted">
        @if (!isTemplateBeingExecuted)
        {
            <text>Execute Template</text>
        }
        else
        {
            <div class="spinner-border spinner-border-sm me-2 text-warning-dark" role="status"></div>
            <text>Executing...</text>
        }
    </button>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    private DataGenerationTemplate? template;
    private bool isTemplateBeingExecuted = false;

    protected override async Task OnInitializedAsync()
    {
        template = await Jim.DataGeneration.GetTemplateAsync(Id, false);
    }

    private string SimplifyAttributeConstraints(DataGenerationTemplateAttribute dgta)
    {
        string response = "";
        if (dgta.MetaverseAttribute?.Type == AttributeDataType.String)
        {
            if (!string.IsNullOrEmpty(dgta.Pattern))
                response += CreateBadgeHtml("Pattern", dgta.Pattern);

            if (dgta.ExampleDataSetInstances != null && dgta.ExampleDataSetInstances.Count > 0)
            {
                var setValues = "";
                foreach (var set in dgta.ExampleDataSetInstances)
                    setValues += set.ExampleDataSet.Name + ", ";

                if (setValues.EndsWith(", "))
                    setValues = setValues.Substring(0, setValues.Length - 2);

                response += CreateBadgeHtml("Data set(s)", setValues);
            }

            if (dgta.MinNumber.HasValue)
                response += CreateBadgeHtml("Min", dgta.MinNumber.Value.ToString("N0"));

            if (dgta.MaxNumber.HasValue)
                response += CreateBadgeHtml("Max", dgta.MaxNumber.Value.ToString("N0"));
        }
        else if (dgta.MetaverseAttribute?.Type == AttributeDataType.Number)
        {
            if (dgta.MinNumber.HasValue)
                response += CreateBadgeHtml("Min", dgta.MinNumber.Value.ToString("N0"));

            if (dgta.MaxNumber.HasValue)
                response += CreateBadgeHtml("Max", dgta.MaxNumber.Value.ToString("N0"));

            if (dgta.SequentialNumbers.HasValue)
                response += CreateBadgeHtml("Sequential", dgta.SequentialNumbers.Value.ToString());

            if (dgta.RandomNumbers.HasValue)
                response += CreateBadgeHtml("Random", dgta.RandomNumbers.Value.ToString());
        }
        else if (dgta.MetaverseAttribute?.Type == AttributeDataType.Bool)
        {
            if (dgta.BoolShouldBeRandom.HasValue)
                response += CreateBadgeHtml("Random", dgta.BoolShouldBeRandom.Value.ToString());

            if (dgta.BoolTrueDistribution.HasValue)
                response += CreateBadgeHtml("True distribution", dgta.BoolTrueDistribution.Value.ToString("N0"));
        }
        else if (dgta.MetaverseAttribute?.Type == AttributeDataType.DateTime && (dgta.MinDate.HasValue || dgta.MaxDate.HasValue))
        {
            if (dgta.MinDate.HasValue)
                response += CreateBadgeHtml("Min", dgta.MinDate.Value.ToShortDateString());

            if (dgta.MaxDate.HasValue)
                response += CreateBadgeHtml("Min", dgta.MaxDate.Value.ToShortDateString());
        }
        else if (dgta.MetaverseAttribute?.Type == AttributeDataType.Reference)
        {
            if (dgta.MvaRefMinAssignments.HasValue)
                response += CreateBadgeHtml("MVA min assignments", dgta.MvaRefMinAssignments.Value.ToString("N0"));

            if (dgta.MvaRefMaxAssignments.HasValue)
                response += CreateBadgeHtml("MVA max assignments", dgta.MvaRefMaxAssignments.Value.ToString("N0"));

            if (dgta.ReferenceMetaverseObjectTypes != null && dgta.ReferenceMetaverseObjectTypes.Count > 0)
            {
                var refTypes = "";
                foreach (var refType in dgta.ReferenceMetaverseObjectTypes)
                    refTypes += refType.Name + ", ";

                if (refTypes.EndsWith(", "))
                    refTypes = refTypes.Substring(0, refTypes.Length - 2);

                response += CreateBadgeHtml("Reference type(s)", refTypes);
            }

            if (dgta.ManagerDepthPercentage.HasValue)
                response += CreateBadgeHtml("Manager depth", dgta.ManagerDepthPercentage + "%");
        }

        return response;
    }

    private string CreateBadgeHtml(string prefix, string value)
    {
        return "<span class=\"badge badge-bigger bg-secondary inline me-2\"><span class=\"fw-normal\">" + prefix + ":</span> " + value + "</span>";
    }

    private async Task ExecuteTemplateAsync()
    {
        isTemplateBeingExecuted = true;
    }
}