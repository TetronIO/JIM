@page "/admin/connected-systems/{Id:int}/objects"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Staging;
@using JIM.Models.Staging.DTOs
@using JIM.Models.Tasking;
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Connected System Objects: @connectedSystemHeader?.Name</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Connected System Objects:</span> @connectedSystemHeader?.Name</MudText>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary mt-2">
    A view of the objects that are staged within JIM for this connected system. This is where changes either, to the connected system are staged ahead of synchronisation, 
    or where changes from the system are staged before being committed to the Metaverse within JIM.
</MudText>

@if (connectedSystemObjectHeaders != null)
{
    <MudGrid Class="mt-5">
        <MudItem xs="6">
            <MudMenu Label="Options" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Default" DisableElevation="true">
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Primary" Icon="@Icons.Material.Filled.Delete" OnClick="HandleDeleteAllObjectsClickAsync">Delete all objects</MudMenuItem>
            </MudMenu>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <ConnectedSystemObjectHeaderPaginator Results="@connectedSystemObjectHeaders" />
        </MudItem>
    </MudGrid>    

    <MudTable Items="@connectedSystemObjectHeaders.Results"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Class="mt-5 mb-5"
              SortLabel="Sort By"
              Filter="new Func<ConnectedSystemObjectHeader,bool>(FilterFunc1)"
              Outlined="true"
              Elevation="0">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.UniqueIdentifierAttributeValue)">Unique Identifier</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.DisplayName)">Display Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.TypeName)">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.Created)">Created</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.JoinType)">Join Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ConnectedSystemObjectHeader, object>(x => x.DateJoined)">Date Joined</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Unique Identifier">@context.UniqueIdentifierAttributeValue</MudTd>
            <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
            <MudTd DataLabel="Type">@context.TypeName</MudTd>
            <MudTd DataLabel="Created">@context.Created</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="Join Type">@(Utilities.SplitOnCapitalLetters(context.JoinType.ToString()))</MudTd>
            <MudTd DataLabel="Date Joined">@(context.DateJoined != null ? context.DateJoined : "-")</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            There are no objects for this connected system. Have you performed a full import?
        </NoRecordsContent>
    </MudTable>

    <MudMessageBox @ref="DeleteAllObjectsMessageBox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Deleting the connected system objects does not cause objects to be deleted in the external system. 
            It just removes the objects from JIM. A full-import on this connect system and full-synchrnisation on all connected system is needed to rebuild the correct state.
            <br><br>
            The deletes will be executed via a task and may take some time. Check the <MudLink Href="/admin/operations" Target="_blank">Operations</MudLink> page or refresh this one to see progress.
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" DisableElevation="true" StartIcon="@Icons.Material.Filled.DeleteForever" Class="ml-2">Delete all objects</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private MudMessageBox? DeleteAllObjectsMessageBox { get; set; }
    private ConnectedSystemHeader? connectedSystemHeader;
    private PagedResultSet<ConnectedSystemObjectHeader>? connectedSystemObjectHeaders;
    private string searchString = "";

    protected override async Task OnParametersSetAsync()
    {
        // why does this view get executed when the web app launches when debugging?
        connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(Id);
        if (connectedSystemHeader == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        if (Page == null || Page < 1)
            Page = 1;

        connectedSystemObjectHeaders = await Jim.ConnectedSystems.GetConnectedSystemObjectHeadersAsync(Id, (int)Page);
    }

    private bool FilterFunc1(ConnectedSystemObjectHeader element) => FilterFunc(element, searchString);

    private bool FilterFunc(ConnectedSystemObjectHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (!string.IsNullOrEmpty(element.DisplayName) && element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async void HandleDeleteAllObjectsClickAsync()
    {
        if (DeleteAllObjectsMessageBox == null)
            return;

        bool? userPromptResult = await DeleteAllObjectsMessageBox.Show();
        if (userPromptResult.HasValue && userPromptResult.Value)
        {
            // attribute the execution to the user
            var user = await Helpers.GetUserAsync(Jim, authenticationStateTask);
            var task = new ClearConnectedSystemObjectsTask(Id, user);
            await Jim.Tasking.CreateServiceTaskAsync(task);
            Snackbar.Add("Connected system objects queued for deletion.", Severity.Info);
        }
    }
}