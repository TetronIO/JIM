@page "/admin/operations"
@using JIM.Application;
@using JIM.Models.Staging;
@using JIM.Models.Staging.DTOs;
@using JIM.Models.Tasking;
@using JIM.Models.Tasking.DTOs;
@using JIM.Utilities;
@attribute [Authorize(Roles = "Administrators")]
@inject JimApplication Jim
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<PageTitle>Operations</PageTitle>
<MudText Typo="Typo.h4">Operations</MudText>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary mt-2">
    JIM executes tasks on a queue. You can see what tasks are queued here. Tasks are made up of different types of operations within JIM, i.e. Synchronisation Tasks and Data Generation Tasks.
</MudText>

<MudPaper Outlined="true" Class="pa-4 mt-5">
    <MudText Typo="Typo.h6">Execute a Run Profile</MudText>
    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">Add a Synchronisation Run to the queue. If it's empty, it'll run immediately, if not, it'll run when all other queued tasks are complete.</MudText>

    @if (connectedSystemHeaders != null && connectedSystemHeaders.Count > 0)
    {
        <MudForm>
            <MudSelect T="ConnectedSystemHeader" ValueChanged="HandleConnectedSystemHeaderChangedAsync" Label="Connected System" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="mt-5" Required="true" RequiredError="Please select a Connected System">
                @foreach (ConnectedSystemHeader connectedSystem in connectedSystemHeaders)
                {
                    <MudSelectItem Value="@connectedSystem" />
                }
            </MudSelect>
            @if (connectedSystemRunProfiles != null)
            {
                <MudSelect T="ConnectedSystemRunProfile" @bind-Value="selectedConnectedSystemRunProfile" Label="Run Profile" Variant="Variant.Outlined" Class="mt-5" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="A run profile is required">
                    @foreach (ConnectedSystemRunProfile runProfile in connectedSystemRunProfiles)
                    {
                        <MudSelectItem Value="@runProfile" />
                    }
                </MudSelect>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleExecuteRunProfileSubmitAsync" Class="mt-5" DisableElevation="true">Execute</MudButton>
        </MudForm>
    }
    else
    {
        <MudAlert Class="mt-5" Severity="Severity.Warning">Please create a <MudLink Href="/admin/connected-systems/">Connected System</MudLink> first.</MudAlert>
    }
</MudPaper>

<MudTable T="ServiceTaskHeader" Items="@serviceTaskHeaders" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" Class="mt-5" Outlined="true" Elevation="0">
    <HeaderContent>
        <MudTh>Actions</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Created</MudTh>
        <MudTh>Initiated By</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                <MudMenuItem Icon="@Icons.Material.Filled.Cancel" IconSize="Size.Small" OnClick="((e) => HandleCancelTaskAsync(context))">Cancel</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Status">@context.Status.ToString().SplitOnCapitalLetters()</MudTd>
        <MudTd DataLabel="Created">@context.Timestamp</MudTd>
        <MudTd DataLabel="Initiated By">
            @if (context.InitiatedBy != null)
            {
                <MudLink Href="@Utilities.GetMetaverseObjectHref(context.InitiatedBy)">@Utilities.GetMetaverseObjectHrefText(context.InitiatedBy)</MudLink>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        There are no service tasks queued.
    </NoRecordsContent>
</MudTable>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private List<ConnectedSystemHeader>? connectedSystemHeaders;
    private List<ConnectedSystemRunProfile>? connectedSystemRunProfiles;
    private ConnectedSystemHeader? selectedConnectedSystemHeader;
    private ConnectedSystemRunProfile? selectedConnectedSystemRunProfile;
    private List<ServiceTaskHeader> serviceTaskHeaders = new List<ServiceTaskHeader>();
    private CancellationTokenSource pollingCancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        connectedSystemHeaders = await Jim.ConnectedSystems.GetConnectedSystemHeadersAsync();

        // get initial data for service task table rendering
        serviceTaskHeaders = await Jim.Tasking.GetServiceTaskHeadersAsync();

        // setup polling for service task header updates
        var token = pollingCancellationTokenSource.Token;
        var task = Task.Factory.StartNew(async () =>
        {
            while (true)
            {
                var stateHasChanged = false;
                Console.WriteLine("JIM.Web: Operations.razor: Polling for service task headers...");
                var newServiceTaskHeaders = await Jim.Tasking.GetServiceTaskHeadersAsync();

                // look for additions or updates...
                foreach (var newServiceTaskHeader in newServiceTaskHeaders)
                {
                    var serviceTaskHeader = serviceTaskHeaders.SingleOrDefault(q => q.Id == newServiceTaskHeader.Id);
                    if (serviceTaskHeader == null)
                    {
                        // newServiceTask is new, add it
                        Console.WriteLine("JIM.Web: Operations.razor: ST-POLLING: Adding service task header: " + newServiceTaskHeader.Id);
                        serviceTaskHeaders.Add(newServiceTaskHeader);
                        stateHasChanged = true;
                    }
                    else if (serviceTaskHeader.Status != newServiceTaskHeader.Status)
                    {
                        // existing service task, so it's either unchanged, or an update
                        Console.WriteLine("JIM.Web: Operations.razor: ST-POLLING: Updating service task header: " + newServiceTaskHeader.Id);
                        var position = serviceTaskHeaders.IndexOf(serviceTaskHeader);
                        serviceTaskHeaders.Remove(serviceTaskHeader);
                        serviceTaskHeaders.Insert(position, newServiceTaskHeader);
                        stateHasChanged = true;
                    }
                }

                // look for removals, i.e. serviceTasks items not in newServiceTasks
                var serviceTaskHeadersToRemove = serviceTaskHeaders.Where(sth => newServiceTaskHeaders.All(sth2 => sth2.Id != sth.Id)).ToList();
                foreach (var serviceTaskHeaderToRemove in serviceTaskHeadersToRemove)
                {
                    Console.WriteLine("JIM.Web: Operations.razor: ST-POLLING: Removing service task header: " + serviceTaskHeaderToRemove.Id);
                    serviceTaskHeaders.Remove(serviceTaskHeaderToRemove);
                    stateHasChanged = true;
                }

                if (stateHasChanged)
                    await InvokeAsync(StateHasChanged);

                Thread.Sleep(TimeSpan.FromSeconds(2));
                if (token.IsCancellationRequested)
                    break;
            }
        }, token);
    }

    void IDisposable.Dispose()
    {
        // make sure we cancel the polling task
        pollingCancellationTokenSource.Cancel();
    }

    private async Task HandleConnectedSystemHeaderChangedAsync(ConnectedSystemHeader connectedSystemHeader)
    {
        selectedConnectedSystemHeader = connectedSystemHeader;
        connectedSystemRunProfiles = await Jim.ConnectedSystems.GetConnectedSystemRunProfilesAsync(connectedSystemHeader.Id);
    }

    private async Task HandleExecuteRunProfileSubmitAsync()
    {
        if (selectedConnectedSystemHeader == null || selectedConnectedSystemRunProfile == null)
            return;

        // attribute the execution to the user
        var user = await Helpers.GetUserAsync(Jim, authenticationStateTask);
        var task = new SynchronisationServiceTask(selectedConnectedSystemHeader.Id, selectedConnectedSystemRunProfile.Id, user);
        await Jim.Tasking.CreateServiceTaskAsync(task);
        Snackbar.Add("Synchronisation task added.", Severity.Success);
    }

    private string GetServiceTaskType(ServiceTask serviceTask)
    {
        if (serviceTask is DataGenerationTemplateServiceTask)
            return "Data Generation Template Task";
        else if (serviceTask is SynchronisationServiceTask)
            return "Synchronisation Task";
        else
            return "Unknown Task";
    }

    private async Task HandleCancelTaskAsync(ServiceTaskHeader serviceTaskHeader)
    {
        if (serviceTaskHeader == null)
            return;

        await Jim.Tasking.CancelServiceTaskAsync(serviceTaskHeader.Id);
        Snackbar.Add("Service task cancellation requested.", Severity.Success);
    }
}
