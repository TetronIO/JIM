@page "/admin/connected-systems/{Id:int}/{Name}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Connected System: @connectedSystem?.Name</PageTitle>
<h1><span class="text-muted">Connected System:</span> @connectedSystem?.Name</h1>

<p>Some aspects of a Connected System can only be configured once basic details and setting values have been provided.</p>

<ul class="nav nav-tabs mt-3">
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Details ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Details">Details</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Settings ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Settings">Settings</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Schema ? "active" : "") @(connectedSystem != null && !connectedSystem.SettingValuesValid ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Schema">Schema</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Containers ? "active" : "") @(connectedSystem != null && !connectedSystem.SettingValuesValid ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Containers">Partitions &amp; Containers</a>
    </li>
</ul>
<div class="box-no-top mb-3">

    @if (connectedSystem != null && settingCategories != null)
    {
        if (activeTab == Tabs.Details)
        {
            <EditForm Model="@connectedSystem" OnValidSubmit="HandleValidDetailsSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="inputConnector" class="form-label">Connector</label>
                    <InputText class="form-control" id="inputConnector" @bind-Value="connectedSystem.ConnectorDefinition.Name" disabled />
                </div>
                <div class="mb-3">
                    <label for="inputName" class="form-label">Name</label>
                    <InputText class="form-control" id="inputName" @bind-Value="connectedSystem.Name" DisplayName="Name" />
                </div>
                <div class="mb-3">
                    <label for="textAreaDescription" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="textAreaDescription" rows="3" @bind-Value="connectedSystem.Description" />
                </div>
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Disabled="detailsFormSubmitting">Save Changes</Button>
            </EditForm>
        }
        else if (activeTab == Tabs.Settings)
        {
            <p>Configure the connector for your environment by supplying values for the settings below.</p>

            <EditForm Model="@connectedSystem" OnValidSubmit="HandleValidSettingsSubmit">
                <JimValidator @ref="connectedSystemSettingsValidator" />
                
                <div class="accordion mb-3">
                    @for (var i = 0; i < settingCategories.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="panelsStayOpen-heading@(i)">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="true" aria-controls="panelsStayOpen-collapse@(i)">
                                    @settingCategories[i]
                                </button>
                            </h2>
                            <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-heading@(i)">
                                <div class="accordion-body">

                                    @foreach (var settingValue in connectedSystem.SettingValues.Where(sv => sv.Setting.Category == @settingCategories[i]))
                                    {
                                        var formElementName = $"setting-el-{i}";
                                        @if (settingValue.Setting.Type == ConnectedSystemSettingType.Heading)
                                        {
                                            <strong>@settingValue.Setting.Name</strong>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Divider)
                                        {
                                            <hr />
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.String)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required) 
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringValue" placeholder="@(!string.IsNullOrEmpty(settingValue.Setting.DefaultStringValue) ? settingValue.Setting.DefaultStringValue : null)" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.StringEncrypted)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringEncryptedValue" type="password" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.CheckBox)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <Switch @bind-Value="settingValue.CheckboxValue" id="@formElementName" Label="@settingValue.Setting.Name" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.DropDown && settingValue.Setting.DropDownValues != null)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">@settingValue.Setting.Name:</label>
                                                <div class="col-sm-10">
                                                    <InputSelect @bind-Value="settingValue.StringValue" id="@formElementName">
                                                        @foreach (var dropDownValue in settingValue.Setting.DropDownValues)
                                                        {
                                                            <option value="@dropDownValue">@dropDownValue</option>
                                                        }
                                                    </InputSelect>
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Label)
                                        {
                                            <div class="mb-3">
                                                @settingValue.Setting.Description
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.File)
                                        {
                                            <p>Files not yet supported for settings.</p>
                                        }
                                        else
                                        {
                                            <p>Oops. Unknown setting type!</p>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    }
                </div>

                <p class="small text-secondary">
                    <strong class="text-danger"> *</strong> Required setting
                </p>

                <ValidationSummary />
                <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Disabled="detailsFormSubmitting">Save Changes</Button>
            </EditForm>
        }
        else if (activeTab == Tabs.Schema)
        {
            <p>schema tab...</p>
        }
        else if (activeTab == Tabs.Containers)
        {
            <p>containers tab...</p>
        }
    }

</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomCenter" AutoHide="true" />

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private JIM.Models.Staging.ConnectedSystem? connectedSystem;
    private List<ToastMessage> messages = new List<ToastMessage>();
    private bool detailsFormSubmitting = false;        
    private Tabs activeTab = Tabs.Details;

    // settings stuff
    private List<ConnectedSystemSettingCategory>? settingCategories;
    private bool settingsFormSubmitting = false;
    private JimValidator? connectedSystemSettingsValidator;

    // ui helper
    private enum Tabs
    {
        Details,
        Settings,
        Schema,
        Containers
    }

    protected override async Task OnInitializedAsync()
    {
        connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(Id);
        if (connectedSystem == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        // get a list of the distinct setting categories in use, so we can render them in category blocks
        settingCategories = connectedSystem.SettingValues.Select(q => q.Setting.Category).Distinct().ToList();
    }

    private async Task HandleValidDetailsSubmit()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidDetailsSubmit)}: connectedSystem was null");
            return;
        }

        detailsFormSubmitting = true;
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your details changes have been saved."));
        detailsFormSubmitting = false;
    }

    private async Task HandleValidSettingsSubmit()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidSettingsSubmit)}: connectedSystem was null");
            return;
        }

        // validate the form
        connectedSystemSettingsValidator?.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        var results = await Jim.ConnectedSystems.ValidateConnectedSystemSettingsAsync(connectedSystem);
        for (var i = 0; i < results.Count; i++)
        {
            if (results[i].IsValid)
                continue;

            if (results[i].SettingValue != null && results[i].SettingValue.Setting != null && results[i].SettingValue.Setting.Name != null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add(results[i].SettingValue.Setting.Name, new() { results[i].ErrorMessage });
            else if (results[i].SettingValue == null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add($"General issue {i}", new() { results[i].ErrorMessage });
        }

        if (errors.Any())
        {
            connectedSystemSettingsValidator?.DisplayErrors(errors);
            return;
        }

        settingsFormSubmitting = true;
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your setting changes have been saved."));
        settingsFormSubmitting = false;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string message) => new ToastMessage
    {
        Type = toastType,
        Title = title,
        HelpText = $"{DateTime.Now}",
        Message = message,
    };
}