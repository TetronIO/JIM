@using JIM.Models.Activities.DTOs
@using JIM.Models.Core
@using JIM.Models.Utility
@using JIM.Models.Enums
@inject NavigationManager NavManager

@if (totalPages > 1 && pageNumbers != null)
{
    <div class="d-flex flex-column align-center">
        <MudPagination 
            ShowFirstButton="true" 
            ShowLastButton="true" 
            Count="@Results.TotalPages"
            ControlButtonClicked="ControlButtonClickedHandler"
            SelectedChanged="SelectedChangedHandler"
            Rectangular="true"
            DisableElevation="true" />
    </div>
}

@code {
    [Parameter]
    [EditorRequired]
    public PagedResultSet<ActivityRunProfileExecutionItemHeader> Results { get; set; } = null!;

    string path = null!;
    const int maxPagesToDisplayInNav = 4;
    int totalPages;
    int numPagesToDisplayInNav;
    int[]? pageNumbers;

    protected override void OnParametersSet()
    {
        if (Results == null)
            return;

        var uri = new Uri(NavManager.Uri);
        if (uri.PathAndQuery.Contains("?"))
            path = uri.PathAndQuery.Substring(0, uri.PathAndQuery.IndexOf("?"));
        else 
            path = uri.PathAndQuery;

        totalPages = Results.TotalPages;
        numPagesToDisplayInNav = totalPages <= maxPagesToDisplayInNav ? totalPages : maxPagesToDisplayInNav;
        pageNumbers = Results.GetNavigationPageNumbers(numPagesToDisplayInNav);
    }

    private void ControlButtonClickedHandler(Page page)
    {
        switch (page)
        {
            case Page.First:
                NavManager.NavigateTo(Results.BuildTagQueryString(1, path));
                break;
            case Page.Last:
                NavManager.NavigateTo(Results.BuildTagQueryString(Results.TotalPages, path));
                break;
            case Page.Next:
                NavManager.NavigateTo(Results.BuildTagQueryString(Results.CurrentPage + 1, path));
                break;
            case Page.Previous:
                NavManager.NavigateTo(Results.BuildTagQueryString(Results.CurrentPage - 1, path));
                break;
        }
    }

    private void SelectedChangedHandler(int pageNumber)
    {
        NavManager.NavigateTo(Results.BuildTagQueryString(pageNumber, path));
    }
}
