@page "/activity/{Id:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities;
@using JIM.Models.Activities.DTOs;
@using JIM.Models.Core
@using JIM.Models.Core.DTOs;
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Activity: @activity?.TargetOperationType @activity?.TargetType.ToString().SplitOnCapitalLetters(): @activity?.TargetName</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Activity:</span> @activity?.TargetOperationType @activity?.TargetType.ToString().SplitOnCapitalLetters(): @(!string.IsNullOrEmpty(activity?.TargetName) ? activity?.TargetName : "(no name)")</MudText>
<MudBreadcrumbs Items="breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@if (activity != null)
{
    <MudText Typo="Typo.h5" Class="mt-5">Details</MudText>
    <MudPaper Class="pa-5 mt-5" Outlined="true">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">ID:</MudText>
                <MudText Class="mud-text-secondary">@activity.Id</MudText>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Target:</MudText>
                <MudText Class="mud-text-secondary">
                    @if (activity.TargetType == ActivityTargetType.DataGenerationTemplate)
                    {
                        <MudLink Href="@($"/admin/example-data/templates/{activity.DataGenerationTemplateId}")">@activity.TargetName</MudLink>
                    }
                    else if (activity.TargetType == ActivityTargetType.ConnectedSystem)
                    {
                        <MudLink Href="@($"/admin/connected-systems/{activity.ConnectedSystemId}/")">@activity.TargetName</MudLink>
                    }
                    else if (activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile && connectedSystemHeader != null)
                    {
                        <MudLink Href="@($"/admin/connected-systems/{activity.ConnectedSystemId}/")">@connectedSystemHeader.Name</MudLink> <text>/ @activity.TargetName</text>
                    }
                    else if (activity.TargetType == ActivityTargetType.MetaverseObject && metaverseObjectHeader != null)
                    {
                        <MudLink Href="@Utilities.GetMetaverseObjectHref(metaverseObjectHeader)">@Utilities.GetMetaverseObjectHrefText(metaverseObjectHeader)</MudLink>
                    }
                    else if (activity.TargetType == ActivityTargetType.SynchronisationRule)
                    {
                        <MudLink Href="@($"/admin/connected-systems/sync-rules/{activity.SyncRuleId}")">@activity.TargetName</MudLink>
                    }
                </MudText>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">When:</MudText>
                <MudText Class="mud-text-secondary">@activity.Created</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Initiated By:</MudText>
                @if (activity.InitiatedBy != null)
                {
                    <MudText>
                        <MudLink Href="@Utilities.GetMetaverseObjectHref(activity.InitiatedBy)">@Utilities.GetMetaverseObjectHrefText(activity.InitiatedBy)</MudLink>
                    </MudText>
                }
                else if (!string.IsNullOrEmpty(activity.InitiatedByName))
                {
                    <MudText>@activity.InitiatedByName</MudText>
                }
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Status:</MudText><br />
                <MudChip Variant="Variant.Text" Color="Helpers.GetActivityMudBlazorColorForStatus(activity.Status)" Class="ml-0">@activity.Status.ToString().SplitOnCapitalLetters()</MudChip>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Execution Time:</MudText>
                <MudText Class="mud-text-secondary">@activity.ExecutionTime</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Total Activity Time:</MudText>
                <MudText Class="mud-text-secondary">@activity.TotalActivityTime</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    @if (!string.IsNullOrEmpty(activity.ErrorMessage) || !string.IsNullOrEmpty(activity.ErrorStackTrace))
    {
        <MudPaper Class="pa-4 mt-4" Style="@($"color:{Colors.Shades.White}; background:{Colors.Red.Default};")" Outlined="true">
            @if (!string.IsNullOrEmpty(activity.ErrorMessage))
            {
                <MudText Typo="Typo.button">Error Message:</MudText>
                <MudText>@activity.ErrorMessage</MudText>
                <br />
            }

            @if (!string.IsNullOrEmpty(activity.ErrorStackTrace))
            {
                <MudText Typo="Typo.button">Error Stack:</MudText>
                <pre>
@activity.ErrorStackTrace
                </pre>
            }
        </MudPaper>
    }

    @if (activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile && activity.TargetOperationType == ActivityTargetOperationType.Execute && activityRunProfileExecutionItemHeaders != null)
    {
        @if (activityRunProfileExecutionStats != null)
        {
            <MudText Typo="Typo.h5" Class="mt-5">Synchronisation Results</MudText>
            <MudStack Row="true" Class="mt-5 mb-5">

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Total Objects</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectChangeCount</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Created</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectCreates</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Updated</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectUpdates</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Deleted</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectDeletes</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Object Types</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectTypes</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true" Style="@(activityRunProfileExecutionStats.TotalObjectErrors > 0 ? $"color:{Colors.Red.Lighten5}; background:{Colors.Red.Default};" : null)">
                    <MudText Typo="Typo.overline">Errors</MudText>
                    <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectErrors</MudText>
                </MudPaper>

            </MudStack>
        }

        <ActivityRunProfileExecutionItemHeaderPaginator Results="@activityRunProfileExecutionItemHeaders" />

        <MudTable Items="@activityRunProfileExecutionItemHeaders.Results" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Filter="new Func<ActivityRunProfileExecutionItemHeader,bool>(FilterFunc1)" Outlined="true" Elevation="0">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.Id)">Internal Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ExternalIdValue)">External Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.DisplayName)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ConnectedSystemObjectType)">External Object Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ObjectChangeType)">Change Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ErrorType)">Error Type</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Internal Id"><MudLink Href="@($"/activity/sync/{context.Id}")">@context.Id</MudLink></MudTd>
                <MudTd DataLabel="External Id">@(!string.IsNullOrEmpty(context.ExternalIdValue) ? context.ExternalIdValue : "-")</MudTd>
                <MudTd DataLabel="Display Name">@(!string.IsNullOrEmpty(context.DisplayName) ? context.DisplayName : "-")</MudTd>
                <MudTd DataLabel="External Object Type">@(context.ConnectedSystemObjectType != null ? context.ConnectedSystemObjectType.ToString().SplitOnCapitalLetters() : "-")</MudTd>
                <MudTd DataLabel="Change Type">
                    <MudChip Variant="Variant.Text" Color="Helpers.GetRunItemMudBlazorColorForType(context.ObjectChangeType)">@context.ObjectChangeType.ToString().SplitOnCapitalLetters()</MudChip>
                </MudTd>
                <MudTd DataLabel="Error Type">
                    @if (context.ErrorType.HasValue)
                    {
                        <MudChip Variant="Variant.Text" Color="Color.Error">@context.ErrorType.Value.ToString().SplitOnCapitalLetters()</MudChip>
                    }
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                There are no sync results to show
            </NoRecordsContent>
        </MudTable>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    private JIM.Models.Activities.Activity? activity;
    private ConnectedSystemHeader? connectedSystemHeader;
    private MetaverseObjectHeader? metaverseObjectHeader;
    private PagedResultSet<ActivityRunProfileExecutionItemHeader>? activityRunProfileExecutionItemHeaders;
    private ActivityRunProfileExecutionStats? activityRunProfileExecutionStats;
    private string searchString = null!;

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Activity", href: "/activity"),
        new BreadcrumbItem("Acivity Detail", href: null, disabled: true)
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Page == null || Page < 1)
            Page = 1;

        activity = await Jim.Activities.GetActivityAsync(Id);
        if (activity == null)
        {
            // activity not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        if (activity.ConnectedSystemId.HasValue)
            connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(activity.ConnectedSystemId.Value);

        if ((activity.TargetType == ActivityTargetType.MetaverseObject || activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile) && activity.MetaverseObjectId != null)
            metaverseObjectHeader = await Jim.Metaverse.GetMetaverseObjectHeaderAsync(activity.MetaverseObjectId.Value);

        if (activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile && activity.TargetOperationType == ActivityTargetOperationType.Execute)
        {
            activityRunProfileExecutionStats = await Jim.Activities.GetActivityRunProfileExecutionStatsAsync(activity.Id);
            activityRunProfileExecutionItemHeaders = await Jim.Activities.GetActivityRunProfileExecutionItemHeadersAsync(activity.Id, Page.Value, 20, 500);
        }
    }

    // this search feature needs to change to support searching all results, not just what's on the page, so needs to do a server side search
    private bool FilterFunc1(ActivityRunProfileExecutionItemHeader element) => FilterFunc(element, searchString);

    private bool FilterFunc(ActivityRunProfileExecutionItemHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (!string.IsNullOrEmpty(element.DisplayName) && element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}