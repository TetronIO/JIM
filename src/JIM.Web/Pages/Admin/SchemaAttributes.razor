@page "/admin/schema/attributes"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Utilities;
@inject JimApplication Jim

<PageTitle>Schema: Attributes</PageTitle>
<MudText Typo="Typo.h4" Class="mt-5"><span class="mud-secondary-text">Schema:</span> Attributes</MudText>
<MudText Typo="Typo.subtitle1">Manage metaverse object types and their attributes.</MudText>

<br />
<MudButton Variant="Variant.Filled" Href="/admin/schema" Size="Size.Small" Color="Color.Primary" DisableElevation="true">Object Types</MudButton>
<MudButton Variant="Variant.Filled" Href="/admin/schema/attributes" Disabled="true" Size="Size.Small" Color="Color.Primary">Attributes</MudButton>

<MudTable Items="@attributeHeaders" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Filter="new Func<MetaverseAttributeHeader,bool>(FilterFunc1)" Elevation="0" Outlined="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Attributes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<MetaverseAttributeHeader, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MetaverseAttributeHeader, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MetaverseAttributeHeader, object>(x => x.AttributePlurality)">Plurality</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MetaverseAttributeHeader, object>(x => x.BuiltIn)">Built-in?</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MetaverseAttributeHeader, object>(x => x.Created)">Created</MudTableSortLabel></MudTh>
        <MudTh>Object Types</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type.ToString().SplitOnCapitalLetters()</MudTd>
        <MudTd DataLabel="Plurality">@(context.AttributePlurality == AttributePlurality.SingleValued ? "Single-Valued" : "Multi-Valued")</MudTd>
        <MudTd DataLabel="Built-in?">@(context.BuiltIn ? "Yes" : "No")</MudTd>
        <MudTd DataLabel="Created">@context.Created</MudTd>
        <MudTd DataLabel="Object Types">
            @if (context.MetaverseObjectTypes != null)
            {
                foreach (var stub in context.MetaverseObjectTypes)
                {
                    var attributeUrl = $"/admin/schema/object-types/{stub.Key}";
                    <MudChip Color="Color.Primary" Href="@attributeUrl">@stub.Value</MudChip>
                }
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IList<MetaverseAttributeHeader>? attributeHeaders;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        attributeHeaders = await Jim.Metaverse.GetMetaverseAttributeHeadersAsync();
    }

    private bool FilterFunc1(MetaverseAttributeHeader element) => FilterFunc(element, searchString);

    private bool FilterFunc(MetaverseAttributeHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}