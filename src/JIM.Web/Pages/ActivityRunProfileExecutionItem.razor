@page "/activity/sync/{Id:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities;
@using JIM.Models.Activities.DTOs;
@using JIM.Models.Core
@using JIM.Models.Core.DTOs;
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Run Profile Execution: @activityRunProfileExecutionItem.?Id</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Run Profile Execution:</span> @(activityRunProfileExecutionItem != null ? activityRunProfileExecutionItem.Id : null)</MudText>
    <MudBreadcrumbs Items="breadcrumbs" Class="ps-0"></MudBreadcrumbs>

    @* Show:
Connected System / Run Profile / Time
Object External Id / Operation Type
Changes (if update) *@

    @if (activityRunProfileExecutionItem != null)
{
    <MudStack Row="true" Class="mt-5 mb-5">

        @if (connectedSystemHeader != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Connected System</MudText>
                <MudText><MudLink Href="@Utilities.GetConnectedSystemHref(connectedSystemHeader)" Typo="Typo.h5">@connectedSystemHeader.Name</MudLink></MudText>
            </MudPaper>
        }

        @if (activity != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Run Profile</MudText>
                <MudText Typo="Typo.h5">@activity.TargetName</MudText>
            </MudPaper>

            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Execution Time</MudText>
                <MudText Typo="Typo.h5">@activity.Executed</MudText>
            </MudPaper>
        }

        @if (activity != null && activity.InitiatedBy != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText><MudLink Href="@(Utilities.GetMetaverseObjectHref(activity.InitiatedBy))" Typo="Typo.h5">@activity.InitiatedBy.DisplayName</MudLink></MudText>
            </MudPaper>
        }
        else if (activity != null && !string.IsNullOrEmpty(activity.InitiatedByName))
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">@activity.InitiatedByName</MudText>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">System</MudText>
            </MudPaper>
        }

        @if (activityRunProfileExecutionItem.ConnectedSystemObject != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Connected System Object</MudText>
                <MudText>

                    <MudTooltip Text="Object Type">
                        <MudChip Color="Color.Default" Label="true" Icon="@Icons.Material.Filled.Schema">@activityRunProfileExecutionItem.ConnectedSystemObject.Type.Name</MudChip>
                    </MudTooltip>

                    <MudChip Color="Color.Info" Variant="Variant.Outlined" Label="true">
                        @if (externalIdAttributeValue != null)
                        {
                            <MudTooltip Text="External Id Attribute Name">
                                <MudText>@(externalIdAttributeValue.Attribute.Name):</MudText>
                            </MudTooltip>
                            <span>&nbsp;</span>
                            <MudLink Href="@(Utilities.GetConnectedSystemObjectHref(activityRunProfileExecutionItem.ConnectedSystemObject))">@externalIdAttributeValue.ToString()</MudLink>
                        }
                        else
                        {
                            <MudLink Href="@(Utilities.GetConnectedSystemObjectHref(activityRunProfileExecutionItem.ConnectedSystemObject))">Connected System Object (No External Id yet)</MudLink>
                        }
                    </MudChip>
                </MudText>
            </MudPaper>
        }

    </MudStack>

    <!-- attribute change table -->
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private JIM.Models.Activities.ActivityRunProfileExecutionItem? activityRunProfileExecutionItem;
    private JIM.Models.Activities.Activity? activity;
    private ConnectedSystemHeader? connectedSystemHeader;
    private List<BreadcrumbItem> breadcrumbs = null!;
    private ConnectedSystemObjectAttributeValue? externalIdAttributeValue;

    protected override async Task OnParametersSetAsync()
    {
        activityRunProfileExecutionItem = await Jim.Activities.GetActivityRunProfileExecutionItemAsync(Id);
        if (activityRunProfileExecutionItem == null)
        {
            // ActivityRunProfileExecutionItem not found, redirect to index page
            NavManager.NavigateTo("/activity");
            return;
        }

        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Activity", href: "/activity"),
            new BreadcrumbItem("Acivity Detail", href: $"/activity/{activityRunProfileExecutionItem.ActivityId}"),
            new BreadcrumbItem(activityRunProfileExecutionItem.Id.ToString(), href: null, disabled: true)
        };

        activity = await Jim.Activities.GetActivityAsync(activityRunProfileExecutionItem.ActivityId);

        // try and get the external id attribute value. we'll need the value and attribute name
        externalIdAttributeValue = activityRunProfileExecutionItem.GetExternalIdAttributeValue();

        // try and get the connected system this relates to (might not exist if it's been deleted)
        var connectedSystemId = activityRunProfileExecutionItem.GetConnectedSystemId();
        if (connectedSystemId != null)
            connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(connectedSystemId.Value);
    }
}
