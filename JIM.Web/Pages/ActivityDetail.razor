@page "/activity/{Id:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities;
@using JIM.Models.Activities.DTOs;
@using JIM.Models.Core.DTOs;
@using JIM.Models.Staging.DTOs
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Activity: @_activity?.TargetOperationType @_activity?.TargetType.ToString().SplitOnCapitalLetters(): @_activity?.TargetName</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Activity:</span> @_activity?.TargetOperationType @_activity?.TargetType.ToString().SplitOnCapitalLetters(): @(!string.IsNullOrEmpty(_activity?.TargetName) ? _activity?.TargetName : "(no name)")</MudText>
<MudBreadcrumbs Items="_breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@if (_activity != null)
{
    <MudText Typo="Typo.h5" Class="mt-5">Details</MudText>
    <MudPaper Class="pa-5 mt-5" Outlined="true">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">ID:</MudText>
                <MudText Class="mud-text-secondary">@_activity.Id</MudText>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Target:</MudText>
                <MudText Class="mud-text-secondary">
                    @switch (_activity.TargetType)
                    {
                        case ActivityTargetType.DataGenerationTemplate:
                            <MudLink Href="@($"/admin/example-data/templates/{_activity.DataGenerationTemplateId}")">@_activity.TargetName</MudLink>
                            break;
                        case ActivityTargetType.ConnectedSystem:
                            <MudLink Href="@($"/admin/connected-systems/{_activity.ConnectedSystemId}/")">@_activity.TargetName</MudLink>
                            break;
                        case ActivityTargetType.ConnectedSystemRunProfile when _connectedSystemHeader != null:
                            <MudLink Href="@($"/admin/connected-systems/{_activity.ConnectedSystemId}/")">@_connectedSystemHeader.Name</MudLink> @:/ @_activity.TargetName
                            break;
                        case ActivityTargetType.MetaverseObject when _metaverseObjectHeader != null:
                            <MudLink Href="@Utilities.GetMetaverseObjectHref(_metaverseObjectHeader)">@Utilities.GetMetaverseObjectHrefText(_metaverseObjectHeader)</MudLink>
                            break;
                        case ActivityTargetType.SyncRule:
                            <MudLink Href="@($"/admin/connected-systems/sync-rules/{_activity.SyncRuleId}")">@_activity.TargetName</MudLink>
                            break;
                        case ActivityTargetType.NotSet:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </MudText>
            </MudItem>

            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">When:</MudText>
                <MudText Class="mud-text-secondary">@_activity.Created</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Initiated By:</MudText>
                @if (_activity.InitiatedBy != null)
                {
                    <MudText>
                        <MudLink Href="@Utilities.GetMetaverseObjectHref(_activity.InitiatedBy)">@Utilities.GetMetaverseObjectHrefText(_activity.InitiatedBy)</MudLink>
                    </MudText>
                }
                else if (!string.IsNullOrEmpty(_activity.InitiatedByName))
                {
                    <MudText>@_activity.InitiatedByName</MudText>
                }
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Status:</MudText><br />
                <MudChip Variant="Variant.Text" Color="Helpers.GetActivityMudBlazorColorForStatus(_activity.Status)" Class="ml-0">@_activity.Status.ToString().SplitOnCapitalLetters()</MudChip>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Execution Time:</MudText>
                <MudText Class="mud-text-secondary">@_activity.ExecutionTime</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudText Typo="Typo.button">Total Activity Time:</MudText>
                <MudText Class="mud-text-secondary">@_activity.TotalActivityTime</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    @if (!string.IsNullOrEmpty(_activity.ErrorMessage) || !string.IsNullOrEmpty(_activity.ErrorStackTrace))
    {
        <MudPaper Class="pa-4 mt-4" Style="@($"color:{Colors.Shades.White}; background:{Colors.Red.Default};")" Outlined="true">
            @if (!string.IsNullOrEmpty(_activity.ErrorMessage))
            {
                <MudText Typo="Typo.button">Error Message:</MudText>
                <MudText>@_activity.ErrorMessage</MudText>
                <br />
            }

            @if (!string.IsNullOrEmpty(_activity.ErrorStackTrace))
            {
                <MudText Typo="Typo.button">Error Stack:</MudText>
                <pre>
@_activity.ErrorStackTrace
                </pre>
            }
        </MudPaper>
    }

    @if (_activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile && _activity.TargetOperationType == ActivityTargetOperationType.Execute && _activityRunProfileExecutionItemHeaders != null)
    {
        @if (_activityRunProfileExecutionStats != null)
        {
            <MudText Typo="Typo.h5" Class="mt-5">Synchronisation Results</MudText>
            <MudStack Row="true" Class="mt-5 mb-5">

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Total Objects</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectChangeCount</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Created</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectCreates</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Updated</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectUpdates</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Objects Deleted</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectDeletes</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true">
                    <MudText Typo="Typo.overline">Object Types</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectTypes</MudText>
                </MudPaper>

                <MudPaper Class="pa-5" Outlined="true" Style="@(_activityRunProfileExecutionStats.TotalObjectErrors > 0 ? $"color:{Colors.Red.Lighten5}; background:{Colors.Red.Default};" : null)">
                    <MudText Typo="Typo.overline">Errors</MudText>
                    <MudText Typo="Typo.h3">@_activityRunProfileExecutionStats.TotalObjectErrors</MudText>
                </MudPaper>

            </MudStack>
        }

        <ActivityRunProfileExecutionItemHeaderPaginator Results="@_activityRunProfileExecutionItemHeaders" />

        <MudTable Items="@_activityRunProfileExecutionItemHeaders.Results" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5 mb-5" SortLabel="Sort By" Filter="new Func<ActivityRunProfileExecutionItemHeader,bool>(FilterFunc1)" Outlined="true" Elevation="0">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.Id)">Internal Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ExternalIdValue!)">External Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.DisplayName!)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ConnectedSystemObjectType!)">External Object Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ObjectChangeType)">Change Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityRunProfileExecutionItemHeader, object>(x => x.ErrorType!)">Error Type</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Internal Id"><MudLink Href="@($"/activity/sync/{context.Id}")">@context.Id</MudLink></MudTd>
                <MudTd DataLabel="External Id">@(!string.IsNullOrEmpty(context.ExternalIdValue) ? context.ExternalIdValue : "-")</MudTd>
                <MudTd DataLabel="Display Name">@(!string.IsNullOrEmpty(context.DisplayName) ? context.DisplayName : "-")</MudTd>
                <MudTd DataLabel="External Object Type">@(context.ConnectedSystemObjectType != null ? context.ConnectedSystemObjectType.ToString().SplitOnCapitalLetters() : "-")</MudTd>
                <MudTd DataLabel="Change Type">
                    <MudChip Variant="Variant.Text" Color="Helpers.GetRunItemMudBlazorColorForType(context.ObjectChangeType)">@context.ObjectChangeType.ToString().SplitOnCapitalLetters()</MudChip>
                </MudTd>
                <MudTd DataLabel="Error Type">
                    @if (context.ErrorType != null && context.ErrorType != ActivityRunProfileExecutionItemErrorType.NotSet)
                    {
                        <MudChip Variant="Variant.Text" Color="Color.Error">@context.ErrorType.Value.ToString().SplitOnCapitalLetters()</MudChip>
                    }
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                There are no sync results to show
            </NoRecordsContent>
        </MudTable>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    private Activity? _activity;
    private ConnectedSystemHeader? _connectedSystemHeader;
    private MetaverseObjectHeader? _metaverseObjectHeader;
    private PagedResultSet<ActivityRunProfileExecutionItemHeader>? _activityRunProfileExecutionItemHeaders;
    private ActivityRunProfileExecutionStats? _activityRunProfileExecutionStats;
    private string _searchString = null!;

    private readonly List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Activity", href: "/activity"),
        new("Activity Detail", href: null, disabled: true)
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or < 1)
            Page = 1;

        _activity = await Jim.Activities.GetActivityAsync(Id);
        if (_activity == null)
        {
            // activity not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        if (_activity.ConnectedSystemId.HasValue)
            _connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(_activity.ConnectedSystemId.Value);

        if (_activity.TargetType is ActivityTargetType.MetaverseObject or ActivityTargetType.ConnectedSystemRunProfile && _activity.MetaverseObjectId != null)
            _metaverseObjectHeader = await Jim.Metaverse.GetMetaverseObjectHeaderAsync(_activity.MetaverseObjectId.Value);

        if (_activity.TargetType == ActivityTargetType.ConnectedSystemRunProfile && _activity.TargetOperationType == ActivityTargetOperationType.Execute)
        {
            _activityRunProfileExecutionStats = await Jim.Activities.GetActivityRunProfileExecutionStatsAsync(_activity.Id);
            _activityRunProfileExecutionItemHeaders = await Jim.Activities.GetActivityRunProfileExecutionItemHeadersAsync(_activity.Id, Page.Value);
        }
    }

    // this search feature needs to change to support searching all results, not just what's on the page, so needs to do a server side search
    private bool FilterFunc1(ActivityRunProfileExecutionItemHeader element) => FilterFunc(element, _searchString);

    private static bool FilterFunc(ActivityRunProfileExecutionItemHeader element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (!string.IsNullOrEmpty(element.DisplayName) && element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}