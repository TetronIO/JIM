@page "/admin/example-data"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.DataGeneration
@using JIM.Models.DataGeneration.Dto
@inject JimApplication Jim

<PageTitle>Example Data Templates</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Example Data:</span> Templates</MudText>
<MudText Typo="Typo.subtitle1">
    You can quickly populate JIM with example data, as a way to demo, or prototype new features without needing to fuly
    configure JIM with Connected Systems, Sync Rules and wait for data to be imported and synchronised etc.
    <br />
    <br />
    Templates define example data to be created in JIM. They consist of one or more object types, with data sets being used to generate values for the object attributes.
</MudText>

<br />
<MudButton Variant="Variant.Filled" Href="/admin/example-data" Size="Size.Small" Color="Color.Primary" Disabled="true">Templates</MudButton>
<MudButton Variant="Variant.Filled" Href="/admin/example-data/datasets" Size="Size.Small" Color="Color.Primary" DisableElevation="true">Data Sets</MudButton>

<MudTable Items="@templates" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-5" SortLabel="Sort By" Outlined="true" Elevation="0">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateHeader, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateHeader, object>(x => x.BuiltIn)">Built-in?</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DataGenerationTemplateHeader, object>(x => x.Created)">Created</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name"><MudLink Href="@("admin/example-data/templates/"+context.Id)">@context.Name</MudLink></MudTd>
        <MudTd DataLabel="Built-in?">@(context.BuiltIn ? "Yes" : "No")</MudTd>
        <MudTd DataLabel="Created">@context.Created</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<DataGenerationTemplateHeader>? templates;

    protected override async Task OnInitializedAsync()
    {
        templates = await Jim.DataGeneration.GetTemplateHeadersAsync();
    }
}