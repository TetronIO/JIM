@inherits LayoutComponentBase
@using MudBlazor.Utilities
<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" Theme="_theme" @ref="@_mudThemeProvider" />
<MudPopoverProvider/>
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>JIM</PageTitle>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
        <MudImage Src="/images/jim-logo.png" Height="40" Class="ms-3 mr-3" title="JIM logo" />
        <MudText Typo="Typo.h6" Class="jim-header-title">Junctional Identity Manager</MudText>
        <MudSpacer />
        <MudTooltip Text="@(IsDarkMode ? LightModeText : DarkModeText)">
            <MudToggleIconButton @bind-Toggled="@IsDarkMode"
                                 Icon="@Icons.Material.Filled.WbSunny" Color="@Color.Inherit"
                                 ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="@Color.Inherit" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="@IsDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="0">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-5 pb-5">
            @Body

            <MudText Align="Align.Center" Typo="Typo.body2" Class="mt-5 mud-text-secondary">
                &copy; @DateTime.UtcNow.Year Tetron
            </MudText>

            <MudText Align="Align.Center">
                <MudLink Href="https://github.com/TetronIO/JIM">
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" aria-label="See us on GitHub" Style="color:#515560;" />
                </MudLink>
            </MudText>

        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    private readonly MudTheme _theme = new()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily =
                [
                    "-apple-system",
                    "Segoe UI Variable Display",
                    "Roboto",
                    "Helvetica Neue",
                    "Arial"
                ],
                FontWeight = 400,
                FontSize = "16px"
            }
        },
        PaletteLight = new PaletteLight()
        {
            AppbarBackground = new MudColor("rgb(60,148,255)"),
            Background = new MudColor("#f6f9fc"),
            DrawerBackground = new MudColor("#eef2f6"),
            Primary = new MudColor("rgb(60,148,255)")
        },
        PaletteDark = new PaletteDark()
        {
            ActionDefault = new MudColor("#acb0b3"), // pagination arrow link text
            // ActionDisabled = new MudColor("#2c3441"), // disabled button
            AppbarBackground = new MudColor("#1a273b"),
            Background = new MudColor("#0e1420"),
            Divider = new MudColor("#292838ff"),
            DrawerBackground = new MudColor("#111926"),
            DrawerIcon = new MudColor("#46545f"),
            DrawerText = new MudColor("#acb0b3"),
            LinesDefault = new MudColor("#2a303c"),
            LinesInputs = new MudColor("#595d68"),
            Primary = new MudColor("rgb(60,148,255)"),
            Surface = new MudColor("#121826"),
            TableHover = new MudColor("#151b2b"),
            TableLines = new MudColor("#2a303c"),
            TextDisabled = new MudColor("#535861"),
            TextPrimary = new MudColor("#acb0b3"),
            TextSecondary = new MudColor("#515560")
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "4px"
        }
    };

    private MudThemeProvider? _mudThemeProvider;
    private const string LightModeText = "Light Mode";
    private const string DarkModeText = "Dark Mode";
    private bool IsDrawerOpen { get; set; } = true;
    private bool IsDarkMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        IsDrawerOpen = !IsDrawerOpen;
    }
}
