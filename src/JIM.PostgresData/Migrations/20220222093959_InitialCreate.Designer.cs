// <auto-generated />
using System;
using JIM.PostgresData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JIM.PostgresData.Migrations
{
    [DbContext(typeof(JimDbContext))]
    [Migration("20220222093959_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JIM.Models.Core.MetaverseAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttributePlurality")
                        .HasColumnType("integer");

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MetaverseObjectTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MetaverseObjectTypeId");

                    b.HasIndex("Name");

                    b.ToTable("MetaverseAttributes");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TypeId");

                    b.ToTable("MetaverseObjects");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ByteValue")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("ContributedBySystemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IntValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("MetaverseObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ContributedBySystemId");

                    b.HasIndex("MetaverseObjectId");

                    b.HasIndex("StringValue");

                    b.ToTable("MetaverseObjectAttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetaverseObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.Core.ServiceSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SSOAuthority")
                        .HasColumnType("text");

                    b.Property<string>("SSOClientId")
                        .HasColumnType("text");

                    b.Property<bool>("SSOEnableLogOut")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SSONameIDAttributeId")
                        .HasColumnType("uuid");

                    b.Property<string>("SSOSecret")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SSONameIDAttributeId");

                    b.ToTable("ServiceSettings");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FunctionLibraryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OutputType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionLibraryId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FunctionLibrary");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FunctionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionParameter");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectedSystemObjectTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MetaverseObjectTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("ProjectToMetaverse")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ProvisionToConnectedSystem")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("ConnectedSystemObjectTypeId");

                    b.HasIndex("MetaverseObjectTypeId");

                    b.ToTable("SyncRules");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("SynchronisationRuleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetConnectedSystemAttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetMetaverseAttributeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SynchronisationRuleId");

                    b.HasIndex("TargetConnectedSystemAttributeId");

                    b.HasIndex("TargetMetaverseAttributeId");

                    b.ToTable("SyncRuleMapping");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConnectedSystemAttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FunctionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetaverseAttributeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SyncRuleMappingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemAttributeId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("SyncRuleMappingId");

                    b.ToTable("SyncRuleMappingSource");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSourceParamValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConnectedSystemAttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FunctionParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetaverseAttributeId")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<Guid?>("SyncRuleMappingSourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemAttributeId");

                    b.HasIndex("FunctionParameterId");

                    b.HasIndex("MetaverseAttributeId");

                    b.HasIndex("SyncRuleMappingSourceId");

                    b.ToTable("SyncRuleMappingSourceParamValue");
                });

            modelBuilder.Entity("JIM.Models.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConnectedSystems");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttributePlurality")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("ConnectedSystemAttributes");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ByteValue")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("ConnectedSystemObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IntValue")
                        .HasColumnType("integer");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ConnectedSystemObjectId");

                    b.ToTable("ConnectedSystemAttributeValue");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UniqueIdentifierAttributeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UniqueIdentifierAttributeId");

                    b.ToTable("ConnectedSystemObjects");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("ConnectedSystemObjectTypes");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemRunProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<int>("RunType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("ConnectedSystemRunProfile");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectedSystemErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("ConnectedSystemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectedSystemStackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RunType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.ToTable("SynchronisationRuns");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRunObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectedSystemErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConnectedSystemObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectedSystemStackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<Guid>("SynchronisationRunId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemObjectId");

                    b.HasIndex("SynchronisationRunId");

                    b.ToTable("SyncRunObject");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseAttribute", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseObjectType", null)
                        .WithMany("Attributes")
                        .HasForeignKey("MetaverseObjectTypeId");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.HasOne("JIM.Models.Security.Role", null)
                        .WithMany("StaticMembers")
                        .HasForeignKey("RoleId");

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectAttributeValue", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ContributedBySystem")
                        .WithMany()
                        .HasForeignKey("ContributedBySystemId");

                    b.HasOne("JIM.Models.Core.MetaverseObject", "MetaverseObject")
                        .WithMany("AttributeValues")
                        .HasForeignKey("MetaverseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ContributedBySystem");

                    b.Navigation("MetaverseObject");
                });

            modelBuilder.Entity("JIM.Models.Core.ServiceSettings", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "SSONameIDAttribute")
                        .WithMany()
                        .HasForeignKey("SSONameIDAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSONameIDAttribute");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.Function", b =>
                {
                    b.HasOne("JIM.Models.Extensibility.FunctionLibrary", "FunctionLibrary")
                        .WithMany()
                        .HasForeignKey("FunctionLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionLibrary");
                });

            modelBuilder.Entity("JIM.Models.Extensibility.FunctionParameter", b =>
                {
                    b.HasOne("JIM.Models.Extensibility.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObjectType", "ConnectedSystemObjectType")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseObjectType", "MetaverseObjectType")
                        .WithMany()
                        .HasForeignKey("MetaverseObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("ConnectedSystemObjectType");

                    b.Navigation("MetaverseObjectType");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.HasOne("JIM.Models.Logic.SyncRule", "SynchronisationRule")
                        .WithMany("Mappings")
                        .HasForeignKey("SynchronisationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "TargetConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("TargetConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "TargetMetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("TargetMetaverseAttributeId");

                    b.Navigation("SynchronisationRule");

                    b.Navigation("TargetConnectedSystemAttribute");

                    b.Navigation("TargetMetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "ConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Extensibility.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId");

                    b.HasOne("JIM.Models.Logic.SyncRuleMapping", null)
                        .WithMany("Sources")
                        .HasForeignKey("SyncRuleMappingId");

                    b.Navigation("ConnectedSystemAttribute");

                    b.Navigation("Function");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSourceParamValue", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "ConnectedSystemAttribute")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemAttributeId");

                    b.HasOne("JIM.Models.Extensibility.FunctionParameter", "FunctionParameter")
                        .WithMany()
                        .HasForeignKey("FunctionParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Core.MetaverseAttribute", "MetaverseAttribute")
                        .WithMany()
                        .HasForeignKey("MetaverseAttributeId");

                    b.HasOne("JIM.Models.Logic.SyncRuleMappingSource", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("SyncRuleMappingSourceId");

                    b.Navigation("ConnectedSystemAttribute");

                    b.Navigation("FunctionParameter");

                    b.Navigation("MetaverseAttribute");
                });

            modelBuilder.Entity("JIM.Models.Security.Role", b =>
                {
                    b.HasOne("JIM.Models.Core.MetaverseObject", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttribute", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemAttributeValue", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObject", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("ConnectedSystemObjectId");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JIM.Models.Staging.ConnectedSystemAttribute", "UniqueIdentifierAttribute")
                        .WithMany()
                        .HasForeignKey("UniqueIdentifierAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Type");

                    b.Navigation("UniqueIdentifierAttribute");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObjectType", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemRunProfile", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", null)
                        .WithMany("RunProfiles")
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRunObject", b =>
                {
                    b.HasOne("JIM.Models.Staging.ConnectedSystemObject", "ConnectedSystemObject")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemObjectId");

                    b.HasOne("JIM.Models.Transactional.SyncRun", "SynchronisationRun")
                        .WithMany("Objects")
                        .HasForeignKey("SynchronisationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystemObject");

                    b.Navigation("SynchronisationRun");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObject", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Core.MetaverseObjectType", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRule", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMapping", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("JIM.Models.Logic.SyncRuleMappingSource", b =>
                {
                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("JIM.Models.Security.Role", b =>
                {
                    b.Navigation("StaticMembers");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystem", b =>
                {
                    b.Navigation("RunProfiles");
                });

            modelBuilder.Entity("JIM.Models.Staging.ConnectedSystemObject", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("JIM.Models.Transactional.SyncRun", b =>
                {
                    b.Navigation("Objects");
                });
#pragma warning restore 612, 618
        }
    }
}
