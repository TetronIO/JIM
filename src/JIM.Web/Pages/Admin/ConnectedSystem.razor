@page "/admin/connected-systems/{Id:int}/{Name}"
@attribute [Authorize(Roles = "Administrators")]
@using JIM.Application
@using JIM.Models.Core
@using JIM.Models.Core.Dto
@using JIM.Models.Staging.Dtos
@using JIM.Models.Staging;
@using JIM.Web.Models;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Connected System: @connectedSystem?.Name</PageTitle>
<h1><span class="text-muted">Connected System:</span> @connectedSystem?.Name</h1>

<p>Some aspects of a Connected System can only be configured once basic details and setting values have been provided.</p>

<ul class="nav nav-tabs mt-3">
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Details ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Details">Details</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Settings ? "active" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Settings">Settings</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Schema ? "active" : "") @(connectedSystem != null && !connectedSystem.SettingValuesValid ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Schema">Schema</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == Tabs.Containers ? "active" : "") @(connectedSystem != null && !connectedSystem.SettingValuesValid ? "disabled" : "")" href="javascript:void(0)" @onclick="() => activeTab = Tabs.Containers">Partitions &amp; Containers</a>
    </li>
</ul>
<div class="box-no-top mb-3">

    @if (connectedSystem != null && settingCategories != null)
    {
        if (activeTab == Tabs.Details)
        {
            <EditForm Model="@connectedSystem" OnValidSubmit="async () => await HandleValidDetailsSubmitAsync()">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="inputConnector" class="form-label">Connector</label>
                    <InputText class="form-control" id="inputConnector" @bind-Value="connectedSystem.ConnectorDefinition.Name" disabled />
                </div>
                <div class="mb-3">
                    <label for="inputName" class="form-label">Name</label>
                    <InputText class="form-control" id="inputName" @bind-Value="connectedSystem.Name" DisplayName="Name" />
                </div>
                <div class="mb-3">
                    <label for="textAreaDescription" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="textAreaDescription" rows="3" @bind-Value="connectedSystem.Description" />
                </div>
                <Button @ref="saveDetailsBtn" Color="ButtonColor.Primary" Type="ButtonType.Submit">Save Changes</Button>
            </EditForm>
        }
        else if (activeTab == Tabs.Settings)
        {
            <p>Configure the connector for your environment by supplying values for the settings below.</p>

            <EditForm Model="@connectedSystem" OnValidSubmit="async () => await HandleValidSettingsSubmitAsync()">
                <JimValidator @ref="connectedSystemSettingsValidator" />

                <div class="accordion mb-3">
                    @for (var i = 0; i < settingCategories.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="panelsStayOpen-heading@(i)">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="true" aria-controls="panelsStayOpen-collapse@(i)">
                                    @settingCategories[i]
                                </button>
                            </h2>
                            <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-heading@(i)">
                                <div class="accordion-body">

                                    @foreach (var settingValue in connectedSystem.SettingValues.Where(sv => sv.Setting.Category == @settingCategories[i]))
                                    {
                                        var formElementName = $"setting-el-{i}";
                                        @if (settingValue.Setting.Type == ConnectedSystemSettingType.Heading)
                                        {
                                            <strong>@settingValue.Setting.Name</strong>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Divider)
                                        {
                                            <hr />
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.String)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringValue" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.StringEncrypted)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <InputText class="form-control" id="@formElementName" @bind-Value="settingValue.StringEncryptedValue" type="password" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Integer)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">
                                                    @settingValue.Setting.Name
                                                    @if (settingValue.Setting.Required)
                                                    {
                                                        <strong class="text-danger"> *</strong>
                                                    }:
                                                </label>
                                                <div class="col-sm-10">
                                                    <NumberInput TValue="int?" @bind-Value="@settingValue.IntValue" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.CheckBox)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label"></label>
                                                <div class="col-sm-10">
                                                    <Switch @bind-Value="settingValue.CheckboxValue" id="@formElementName" Label="@settingValue.Setting.Name" />
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.DropDown && settingValue.Setting.DropDownValues != null)
                                        {
                                            <div class="row mb-3">
                                                <label for="@formElementName" class="col-sm-2 col-form-label">@settingValue.Setting.Name:</label>
                                                <div class="col-sm-10">
                                                    <InputSelect @bind-Value="settingValue.StringValue" id="@formElementName">
                                                        @foreach (var dropDownValue in settingValue.Setting.DropDownValues)
                                                        {
                                                            <option value="@dropDownValue">@dropDownValue</option>
                                                        }
                                                    </InputSelect>
                                                    @if (!string.IsNullOrEmpty(settingValue.Setting.Description))
                                                    {
                                                        <div class="form-text">@settingValue.Setting.Description</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.Label)
                                        {
                                            <div class="mb-3">
                                                @settingValue.Setting.Description
                                            </div>
                                        }
                                        else if (settingValue.Setting.Type == ConnectedSystemSettingType.File)
                                        {
                                            <p>Files not yet supported for settings.</p>
                                        }
                                        else
                                        {
                                            <p>Oops. Unknown setting type!</p>
                                        }
                                    }

                                </div>
                            </div>
                        </div>
                    }
                </div>

                <p class="small text-secondary">
                    <strong class="text-danger"> *</strong> Required setting
                </p>

                <ValidationSummary />
                <Button @ref="saveSettingsBtn" Color="ButtonColor.Primary" Type="ButtonType.Submit">Save Changes</Button>
            </EditForm>
        }
        else if (activeTab == Tabs.Schema)
        {
            <div class="mb-3">
                <p>
                    Select which object types and which attributes for them are managed by JIM here. To maximise performance, only select those that need managing.
                </p>
                <Callout Type="(connectedSystem.ObjectTypes.Count > 0 ? CalloutType.Warning : CalloutType.Info)">
                    @if (connectedSystem.ObjectTypes.Count == 0)
                    {
                        <text>
                            Load the schema from the connected system, to be able to select which object types and attributes you want to manage with JIM.
                        </text>
                    }
                    else
                    {
                        <text>
                            <strong>Refreshing the schema can result in data-loss</strong>. If object types or attributes are discovered to have been removed at the connected system, then this will result in all references to them being removed from within JIM,
                            i.e. synchronisation rules, attribute flow, attributes values and even entire objects will be deleted if object types are removed. Import with caution. Ensure the Connected System identity has the right
                            permissions needed to retrieve the schema, and consider a database backup before proceeeding.
                        </text>
                    }
                    <div class="mt-3">
                        <Button @ref="importSchemaBtn" Color="(connectedSystem.ObjectTypes.Count == 0 ? ButtonColor.Primary : ButtonColor.Warning)" Size="Size.Small" @onclick="async () => await HandleImportSchemaAsync()">
                            @if (connectedSystem.ObjectTypes.Count == 0) {
                                <text>Load Schema</text>
                            } else {
                                <text>Refresh Schema</text>
                            }
                            </Button>
                    </div>
                </Callout>
            </div>

            @if (connectedSystem.ObjectTypes.Count > 0)
            {
                <div class="accordion mb-3" id="ot-accordion">
                    @for (var i = 0; i < connectedSystem.ObjectTypes.Count; i++)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="ot-heading-@(i)">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#ot-collapse-@(i)" aria-expanded="true" aria-controls="ot-collapse-@(i)">
                                    @if (connectedSystem.ObjectTypes[i].Attributes.Any(q => q.Selected))
                                    {
                                        <span class="jim-cs-s-selected"><i class="bi bi-check2-circle"></i></span>
                                    }
                                    else
                                    {
                                        <span class="jim-cs-s-not-selected"></span>
                                    }
                                    @connectedSystem.ObjectTypes[i].Name
                                </button>
                            </h2>
                            <div id="ot-collapse-@(i)" class="accordion-collapse collapse" aria-labelledby="ot-heading-@(i)" data-bs-parent="#ot-accordion">
                                <div class="accordion-body">

                                    Select the @connectedSystem.ObjectTypes[i].Name attributes you want to manage.

                                    <div class="mt-3 mb-3">
                                        <Button Color="ButtonColor.Secondary" Outline="true" Size="Size.Small"><i class="bi bi-check-all"></i> Select All</Button>
                                        <Button Color="ButtonColor.Secondary" Outline="true" Size="Size.Small"><i class="bi bi-x-circle"></i> Clear All</Button>
                                    </div>

                                    <!-- temporary table, whilst we wait for Blazor.Bootstrap package update to support dynamic datasources -->
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th scope="col"></th>
                                                <th scope="col">Attribute</th>
                                                <th scope="col">Class</th>
                                                <th scope="col">Description</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var csa in connectedSystem.ObjectTypes[i].Attributes)
                                            {
                                                <tr>
                                                    <td><Switch @bind-Value="csa.Selected" /></td>
                                                    <td>@csa.Name</td>
                                                    <td>@csa.ClassName</td>
                                                    <td>@csa.Description</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                    @*<Grid TItem="ConnectedSystemAttribute" DataProvider="EmployeesDataProvider" DataSource="connectedSystem.ObjectTypes[i].Attributes" AllowFiltering="true" Responsive="true" class="table table-hover table-bordered table-striped">
                                    <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Name" PropertyName="Name">
                                    @context.Name
                                    </GridColumn>
                                    <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Class" PropertyName="ClassName">
                                    @context.ClassName
                                    </GridColumn>
                                    <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Plurality" PropertyName="AttributePlurality">
                                    @(context.AttributePlurality == AttributePlurality.SingleValued ? "Single Valued" : "Multi Valued")
                                    </GridColumn>
                                    <GridColumn TItem="ConnectedSystemAttribute" HeaderText="Description" PropertyName="Description">
                                    @context.Description
                                    </GridColumn>
                                    </Grid>*@
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <Button @ref="saveAttributesBtn" Color="ButtonColor.Primary" Type="ButtonType.Submit" @onclick="async () => await  HandleAttributeSelectionSubmitAsync()">Save Changes</Button>
            }
            else
            {
                <div class="p-5 bg-light rounded-3">
                    <div class="container-fluid py-5 text-center text-secondary">
                        Schema not yet imported
                    </div>
                </div>
            }
        }
        else if (activeTab == Tabs.Containers)
        {
            <text>Containers go here</text>
@*            <div class="mb-3">
                <p>
                    Select which partitions and containers are managed by JIM here. To maximise performance, only select those that contain objects that will be managed.
                </p>
                <Callout Type="CalloutType.Warning">
                    <strong>Importing the schema can result in data-loss</strong>. If object types or attributes are discovered to have been removed at the connected system, then this will result in all references to them being removed from within JIM,
                    i.e. synchronisation rules, attribute flow, attributes values and even entire objects will be deleted if object types are removed. Import with caution. Ensure the Connected System identity has the right
                    permissions needed to retrieve the schema, and consider a database backup before proceeeding.
                    <div class="mt-3">
                        <Button @ref="importSchemaBtn" Color="ButtonColor.Warning" Size="Size.Small" @onclick="async () => await HandleImportSchemaAsync()">
                            @if (connectedSystem.ObjectTypes.Count == 0)
                            {
                                <text>Load Schema</text>
                            }
                            else
                            {
                                <text>Refresh Schema</text>
                            }
                        </Button>
                    </div>
                </Callout>
            </div>*@
        }
    }

</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomCenter" AutoHide="true" />

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private JIM.Models.Staging.ConnectedSystem? connectedSystem;
    private List<ToastMessage> messages = new List<ToastMessage>();
    private Tabs activeTab = Tabs.Details;
    private List<ConnectedSystemSettingCategory>? settingCategories;
    private JimValidator? connectedSystemSettingsValidator;
    private Button? saveDetailsBtn;
    private Button? saveSettingsBtn;
    private Button? importSchemaBtn;
    private Button? saveAttributesBtn;

    // ui helper
    private enum Tabs
    {
        Details,
        Settings,
        Schema,
        Containers
    }

    protected override async Task OnInitializedAsync()
    {
        connectedSystem = await Jim.ConnectedSystems.GetConnectedSystemAsync(Id);
        if (connectedSystem == null)
        {
            // connected system not found, redirect to index page
            NavManager.NavigateTo("../");
            return;
        }

        // get a list of the distinct setting categories in use, so we can render them in category blocks
        settingCategories = connectedSystem.SettingValues.Select(q => q.Setting.Category).Distinct().ToList();
    }

    private async Task HandleValidDetailsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidDetailsSubmitAsync)}: connectedSystem was null");
            return;
        }

        saveDetailsBtn?.ShowLoading("Saving changes...");
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your details changes have been saved."));
        saveDetailsBtn?.HideLoading();
    }

    private async Task HandleValidSettingsSubmitAsync()
    {
        if (connectedSystem == null)
        {
            Console.WriteLine($"{nameof(HandleValidSettingsSubmitAsync)}: connectedSystem was null");
            return;
        }

        saveSettingsBtn?.ShowLoading("Saving settings...");

        // validate the form
        connectedSystemSettingsValidator?.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        var results = await Jim.ConnectedSystems.ValidateConnectedSystemSettingsAsync(connectedSystem);
        for (var i = 0; i < results.Count; i++)
        {
            if (results[i].IsValid)
                continue;

            if (results[i].SettingValue != null && results[i].SettingValue.Setting != null && results[i].SettingValue.Setting.Name != null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add(results[i].SettingValue.Setting.Name, new() { results[i].ErrorMessage });
            else if (results[i].SettingValue == null && !string.IsNullOrEmpty(results[i].ErrorMessage))
                errors?.Add($"General issue {i}", new() { results[i].ErrorMessage });
        }

        if (errors != null && errors.Any())
        {
            connectedSystemSettingsValidator?.DisplayErrors(errors);
            saveSettingsBtn?.HideLoading();
            return;
        }

        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your setting changes have been saved."));
        saveSettingsBtn?.HideLoading();
    }

    private async Task HandleImportSchemaAsync()
    {
        if (connectedSystem == null)
            return;

        importSchemaBtn?.ShowLoading("Retrieving schema...");
        await Jim.ConnectedSystems.ImportConnectedSystemSchemaAsync(connectedSystem);
        importSchemaBtn?.HideLoading();
    }

    private async Task HandleAttributeSelectionSubmitAsync()
    {
        if (connectedSystem == null)
            return;

        saveAttributesBtn?.ShowLoading("Saving changes...");
        
        await Jim.ConnectedSystems.UpdateConnectedSystemAsync(connectedSystem);
        messages.Add(CreateToastMessage(ToastType.Success, "Success", "Your attribute changes have been saved."));

        saveAttributesBtn?.HideLoading();
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string message) => new ToastMessage
        {
            Type = toastType,
            Title = title,
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    //private async Task<GridDataProviderResult<ConnectedSystemAttribute>> EmployeesDataProvider(GridDataProviderRequest<ConnectedSystemAttribute> request)
    //{
    //    return await Task.FromResult(request.ApplyTo(request.DataSource));
    //}
}