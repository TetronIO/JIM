@page "/activity/sync/{Id:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Activities;
@using JIM.Models.Activities.DTOs;
@using JIM.Models.Core
@using JIM.Models.Core.DTOs;
@using JIM.Models.Staging
@using JIM.Models.Staging.DTOs
@using JIM.Models.Utility;
@using JIM.Utilities;
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>Run Profile Execution: @activityRunProfileExecutionItem.?Id</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">Run Profile Execution:</span> @(activityRunProfileExecutionItem != null ? activityRunProfileExecutionItem.Id : null)</MudText>
<MudBreadcrumbs Items="breadcrumbs" Class="ps-0"></MudBreadcrumbs>

@* Show:
Connected System / Run Profile / Time
Object External Id / Operation Type
Changes (if update) *@

@if (activityRunProfileExecutionItem != null)
{
    <MudStack Row="true" Class="mt-5 mb-5">

        @if (connectedSystemHeader != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Connected System</MudText>
                <MudText><MudLink Href="@Utilities.GetConnectedSystemHref(connectedSystemHeader)" Typo="Typo.h5">@connectedSystemHeader.Name</MudLink></MudText>
            </MudPaper>
        }

        @if (activity != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Run Profile</MudText>
                <MudText Typo="Typo.h5">@activity.TargetName</MudText>
            </MudPaper>

            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Execution Time</MudText>
                <MudText Typo="Typo.h5">@activity.Executed</MudText>
            </MudPaper>
        }

        @if (activity != null && activity.InitiatedBy != null)
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText><MudLink Href="@(Utilities.GetMetaverseObjectHref(activity.InitiatedBy))" Typo="Typo.h5">@activity.InitiatedBy.DisplayName</MudLink></MudText>
            </MudPaper>
        }
        else if (activity != null && !string.IsNullOrEmpty(activity.InitiatedByName))
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">@activity.InitiatedByName</MudText>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-5" Outlined="true">
                <MudText Typo="Typo.overline">Initiated By</MudText>
                <MudText Typo="Typo.h5">System</MudText>
            </MudPaper>
        }




@*         <MudPaper Class="pa-5" Outlined="true">
            <MudText Typo="Typo.overline">Objects Deleted</MudText>
            <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectDeletes</MudText>
        </MudPaper>

        <MudPaper Class="pa-5" Outlined="true">
            <MudText Typo="Typo.overline">Object Types</MudText>
            <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectTypes</MudText>
        </MudPaper>

        <MudPaper Class="pa-5" Outlined="true" Style="@(activityRunProfileExecutionStats.TotalObjectErrors > 0 ? $"color:{Colors.Red.Lighten5}; background:{Colors.Red.Default};" : null)">
            <MudText Typo="Typo.overline">Errors</MudText>
            <MudText Typo="Typo.h3">@activityRunProfileExecutionStats.TotalObjectErrors</MudText>
        </MudPaper> *@

    </MudStack>
}




@code {
    [Parameter]
    public Guid Id { get; set; }

    private JIM.Models.Activities.ActivityRunProfileExecutionItem? activityRunProfileExecutionItem;
    private JIM.Models.Activities.Activity? activity;
    private ConnectedSystemHeader? connectedSystemHeader;
    private List<BreadcrumbItem> breadcrumbs = null!;
    private string? externalId;

    protected override async Task OnParametersSetAsync()
    {
        activityRunProfileExecutionItem = await Jim.Activities.GetActivityRunProfileExecutionItemAsync(Id);
        if (activityRunProfileExecutionItem == null)
        {
            // ActivityRunProfileExecutionItem not found, redirect to index page
            NavManager.NavigateTo("/activity");
            return;
        }

        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Activity", href: "/activity"),
            new BreadcrumbItem("Acivity Detail", href: $"/activity/{activityRunProfileExecutionItem.ActivityId}"),
            new BreadcrumbItem(activityRunProfileExecutionItem.Id.ToString(), href: null, disabled: true)
        };

        activity = await Jim.Activities.GetActivityAsync(activityRunProfileExecutionItem.ActivityId);

        // try and get the external id in string form
        var externalIdAttributeValue = activityRunProfileExecutionItem.GetExternalIdAttributeValue();
        externalId = externalIdAttributeValue != null ? externalIdAttributeValue.ToString() : null;

        // try and get the connected system this relates to (might not exist if it's been deleted)
        var connectedSystemId = activityRunProfileExecutionItem.GetConnectedSystemId();
        if (connectedSystemId != null)
            connectedSystemHeader = await Jim.ConnectedSystems.GetConnectedSystemHeaderAsync(connectedSystemId.Value);
    }
}
