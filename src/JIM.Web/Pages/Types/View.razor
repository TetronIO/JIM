@page "/t/{TypeNameUrlParam}/v/{IdParam:guid}"
@attribute [Authorize(Roles = "Users")]
@using JIM.Application
@using JIM.Models.Core
@inject JimApplication Jim
@inject NavigationManager NavManager

<PageTitle>@MetaverseObjectType?.Name.Substring(0, MetaverseObjectType.Name.Length-1): @displayName</PageTitle>
<MudText Typo="Typo.h4"><span class="mud-secondary-text">@(MetaverseObjectType?.Name.Substring(0, MetaverseObjectType.Name.Length - 1)):</span> @displayName</MudText>

<MudPaper Class="pa-5 mt-5" Outlined="true">
    @if (MetaverseObject != null)
    {
        <MudGrid>
            @foreach (var attributeValue in MetaverseObject.AttributeValues)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudField Label="@attributeValue.Attribute.Name" Variant="Variant.Outlined">
                        @if (attributeValue.Attribute.Type == AttributeDataType.Text)
                        {
                            if (attributeValue.Attribute.Name == Constants.BuiltInAttributes.Email && !string.IsNullOrEmpty(attributeValue.StringValue))
                            {
                                <MudLink Href="@($"mailto:{attributeValue.StringValue}")">@attributeValue.StringValue</MudLink>
                            }
                            else
                            {
                                @attributeValue.StringValue
                            }
                        }
                        else if (attributeValue.Attribute.Type == AttributeDataType.Number)
                        {
                            @attributeValue.IntValue
                        }
                        else if (attributeValue.Attribute.Type == AttributeDataType.DateTime)
                        {
                            @attributeValue.DateTimeValue
                        }
                        else if (attributeValue.Attribute.Type == AttributeDataType.Guid)
                        {
                            @attributeValue.GuidValue.ToString()
                        }
                        else if (attributeValue.Attribute.Type == AttributeDataType.Boolean && attributeValue.BoolValue.HasValue)
                        {
                            @(attributeValue.BoolValue.Value ? "true" : "false")
                        }
                        else if (attributeValue.Attribute.Type == AttributeDataType.Reference && attributeValue.ReferenceValue != null)
                        {
                            <MudLink Href="@Helpers.GetMetaverseObjectUrl(attributeValue.ReferenceValue)">@attributeValue.ReferenceValue.DisplayName</MudLink>
                        }
                    </MudField>
                </MudItem>
            }
        </MudGrid>
    }
</MudPaper>

@code {
    [Parameter]
    public string TypeNameUrlParam { get; set; }

    [Parameter]
    public Guid IdParam { get; set; }

    private MetaverseObject? MetaverseObject { get; set; }

    private MetaverseObjectType? MetaverseObjectType { get; set; }

    private string? displayName;

    protected override async Task OnParametersSetAsync()
    {
        var typeName = Helpers.ConvertFromUrlParam(TypeNameUrlParam);
        MetaverseObjectType = await Jim.Metaverse.GetMetaverseObjectTypeAsync(typeName, false);
        if (MetaverseObjectType == null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        // get the metaverse object...
        MetaverseObject = await Jim.Metaverse.GetMetaverseObjectAsync(IdParam);
        if (MetaverseObject == null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        displayName = MetaverseObject.DisplayName;
    }
}